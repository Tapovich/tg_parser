"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
"""

import re
import random
from typing import Dict, List, Optional
from emoji_config import apply_template, get_emoji, get_thematic_emoji


class ContentRewriter:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å—Ç–∏–ª–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    
    def __init__(self):
        self.news_intro_patterns = [
            "üî• –í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! {content}",
            "üì∞ –°–≤–µ–∂–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {content}",
            "‚ö° –ì–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! {content}",
            "üéØ –ê–∫—Ç—É–∞–ª—å–Ω–æ —Å–µ–π—á–∞—Å: {content}",
            "üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: {content}",
            "üöÄ –ù–æ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π! {content}",
            "üí• –°–µ–Ω—Å–∞—Ü–∏—è! {content}",
            "üîî –í–∞–∂–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {content}"
        ]
        
        self.update_patterns = [
            "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ! {content}",
            "‚ö° –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {content}",
            "üéâ –†–µ–ª–∏–∑! {content}",
            "üîß –£–ª—É—á—à–µ–Ω–∏—è: {content}",
            "üì± –û–±–Ω–æ–≤–ª–µ–Ω–æ: {content}",
            "üÜï –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {content}",
            "üéØ –í–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {content}"
        ]
        
        self.airdrop_patterns = [
            "üéÅ –†–∞–∑–¥–∞—á–∞! {content}",
            "üí∞ –ù–æ–≤—ã–π –∞irdrop: {content}",
            "ü™ô –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã! {content}",
            "üéâ –ü–æ–¥–∞—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {content}",
            "üíé –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ! {content}",
            "üî• –ì–æ—Ä—è—á–∞—è —Ä–∞–∑–¥–∞—á–∞: {content}",
            "‚≠ê –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {content}"
        ]
        
        self.call_to_action = [
            "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π!",
            "–ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!",
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Å–æ–±—ã—Ç–∏–π –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!",
            "–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π!",
            "–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º–∏ —É–∑–Ω–∞–≤–∞—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!",
            "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏—á–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ!",
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
        ]
    
    def detect_content_type(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        text_lower = text.lower()
        
        # Airdrop / —Ä–∞–∑–¥–∞—á–∏
        airdrop_keywords = ['airdrop', '—Ä–∞–∑–¥–∞—á–∞', '–ø–æ–¥–∞—Ä–æ–∫', 'gifts', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '—Ç–æ–∫–µ–Ω', 'drop']
        if any(keyword in text_lower for keyword in airdrop_keywords):
            return "airdrop"
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_keywords = ['–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', 'update', '—Ä–µ–ª–∏–∑', '–≤–µ—Ä—Å–∏—è', 'upgrade', '—É–ª—É—á—à–µ–Ω–∏–µ']
        if any(keyword in text_lower for keyword in update_keywords):
            return "update"
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        analysis_keywords = ['–∞–Ω–∞–ª–∏–∑', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'chart', '–≥—Ä–∞—Ñ–∏–∫', '–¥–∞–Ω–Ω—ã–µ', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ']
        if any(keyword in text_lower for keyword in analysis_keywords):
            return "analysis"
        
        return "news"
    
    def clean_and_structure_text(self, text: str) -> str:
        """–¢—â–∞—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ—Ç –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        
        # –£–±–∏—Ä–∞–µ–º Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        text = re.sub(r'\*{1,3}([^*]*)\*{1,3}', r'\1', text)  # *text*, **text**, ***text***
        text = re.sub(r'_{1,3}([^_]*)_{1,3}', r'\1', text)    # _text_, __text__, ___text___
        text = re.sub(r'`{1,3}([^`]*)`{1,3}', r'\1', text)     # `code`
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è  
        text = re.sub(r'\[([^\]]*)\]\([^)]*\)', r'\1', text)   # [text](link)
        text = re.sub(r'http[s]?://[^\s]+', '', text)         # –æ–±—ã—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        text = re.sub(r't\.me/[^\s]+', '', text)              # t.me —Å—Å—ã–ª–∫–∏
        text = re.sub(r'@\w+', '', text)                      # @—É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        text = re.sub(r'#\w+', '', text)                      # #—Ö–µ—à—Ç–µ–≥–∏
        
        # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –º—É—Å–æ—Ä
        text = re.sub(r'[‚ñ™‚ñ´‚óæ‚óΩ‚ñ∏‚ñπ‚óÇ‚óÉ‚ñ¥‚ñµ‚ñæ‚ñø‚ñ∫‚óÑ‚ñ≤‚ñº‚ô¶‚ôß‚ô†‚ô£‚ô•‚ô§‚ô°‚ô¢]', '', text)
        text = re.sub(r'[‚ûñ‚ûï‚ûó‚úñÔ∏è‚úîÔ∏è‚ùå‚ùó‚ùì‚ö†Ô∏è]', '', text)
        text = re.sub(r'[‚îå‚îê‚îî‚îò‚îú‚î§‚î¨‚î¥‚îº‚îÄ‚îÇ]', '', text)
        text = re.sub(r'[|]', '', text)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        text = re.sub(r'[.]{2,}', '...', text)
        text = re.sub(r'[!]{2,}', '!', text)
        text = re.sub(r'[?]{2,}', '?', text)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'\s{2,}', ' ', text)
        text = re.sub(r'\n{2,}', '\n', text)
        
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        text = '\n'.join(lines)
        
        return text.strip()
    
    def extract_key_points(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = re.split(r'[.!?]+', text)
        sentences = [s.strip() for s in sentences if len(s.strip()) > 10]
        
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ)
        key_points = []
        for sentence in sentences:
            if len(sentence) > 20 and len(sentence) < 200:
                key_points.append(sentence)
        
        return key_points[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–∞
    
    def enhance_text(self, text: str, content_type: str) -> str:
        """–£–ª—É—á—à–∞–µ—Ç –∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç"""
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if content_type == "airdrop":
            patterns = self.airdrop_patterns
        elif content_type == "update":
            patterns = self.update_patterns
        else:
            patterns = self.news_intro_patterns
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        pattern = random.choice(patterns)
        
        return pattern.format(content=text)
    
    def add_engaging_elements(self, text: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –¥–ª—è –≤–∞–∂–Ω–æ—Å—Ç–∏
        if not text.endswith(('!', '?', '.')):
            text += '!'
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–∫–∏ –Ω–∞ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
        text = re.sub(r'\.( [–ê-–ØA-Z])', r'!\1', text, count=1)
        
        return text
    
    def create_compelling_post(self, original_text: str, min_length: int = 200, max_length: int = 800) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            original_text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            min_length: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞
        
        Returns:
            –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = self.detect_content_type(original_text)
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        cleaned_text = self.clean_and_structure_text(original_text)
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, —Ä–∞—Å—à–∏—Ä—è–µ–º –µ–≥–æ
        if len(cleaned_text) < min_length:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
            key_points = self.extract_key_points(cleaned_text)
            
            if key_points:
                # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                main_point = key_points[0]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                if content_type == "airdrop":
                    context = self._add_airdrop_context(main_point)
                elif content_type == "update":
                    context = self._add_update_context(main_point)
                else:
                    context = self._add_news_context(main_point)
                
                enhanced_text = f"{main_point} {context}"
            else:
                # –ï—Å–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —É–ª—É—á—à–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                enhanced_text = self._expand_short_text(cleaned_text, content_type)
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π, –ø—Ä–æ—Å—Ç–æ —É–ª—É—á—à–∞–µ–º –µ–≥–æ
            enhanced_text = cleaned_text
        
        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(enhanced_text) > max_length:
            enhanced_text = enhanced_text[:max_length].rsplit(' ', 1)[0] + '...'
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
        enhanced_text = self.add_engaging_elements(enhanced_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        final_text = self.enhance_text(enhanced_text, content_type)
        
        # –î–æ–±–∞–≤–ª—è–µ–º call to action
        cta = random.choice(self.call_to_action)
        if len(final_text) + len(cta) + 10 < max_length:
            final_text += f"\n\nüí´ {cta}"
        
        return final_text
    
    def _add_airdrop_context(self, main_point: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è airdrop –ø–æ—Å—Ç–æ–≤"""
        contexts = [
            "–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã!",
            "–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–∞—á–µ.",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.",
            "–†–∞–∑–¥–∞—á–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞–∑–≤–∏—Ç–∏—è —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã.",
            "–£—á–∞—Å—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∏ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        ]
        return random.choice(contexts)
    
    def _add_update_context(self, main_point: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        contexts = [
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞.",
            "–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
            "–≠—Ç–æ –≤–∞–∂–Ω—ã–π —à–∞–≥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.",
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç.",
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π."
        ]
        return random.choice(contexts)
    
    def _add_news_context(self, main_point: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
        contexts = [
            "–≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.",
            "–≠–∫—Å–ø–µ—Ä—Ç—ã —Å—á–∏—Ç–∞—é—Ç —ç—Ç–æ –≤–∞–∂–Ω—ã–º —à–∞–≥–æ–º –≤–ø–µ—Ä–µ–¥.",
            "–ù–æ–≤–æ—Å—Ç—å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –≤ –∫—Ä–∏–ø—Ç–æ—Å–æ–æ–±—â–µ—Å—Ç–≤–µ.",
            "–≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ä–∞—Å—Ç—É—â—É—é –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏.",
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Å–æ–±—ã—Ç–∏–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        ]
        return random.choice(contexts)
    
    def _expand_short_text(self, text: str, content_type: str) -> str:
        """–†–∞—Å—à–∏—Ä—è–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç"""
        if content_type == "airdrop":
            expansion = "–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —Ä–∞—Å—Ç—É—â–µ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã."
        elif content_type == "update":
            expansion = "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –≤–∫–ª—é—á–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        else:
            expansion = "–≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–≤–ª–µ–∫–ª–æ –≤–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ–≥–æ –∫—Ä–∏–ø—Ç–æ—Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–º –º–æ–º–µ–Ω—Ç–æ–º –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏."
        
        return f"{text} {expansion}"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
content_rewriter = ContentRewriter()


def rewrite_post(original_text: str, style: str = "auto") -> str:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
    
    Args:
        original_text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        style: –°—Ç–∏–ª—å –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è ("news", "update", "airdrop", "auto")
    
    Returns:
        –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
    """
    rewritten = content_rewriter.create_compelling_post(original_text)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º emoji —à–∞–±–ª–æ–Ω
    if style == "auto":
        style = content_rewriter.detect_content_type(original_text)
    
    return apply_template(rewritten, style) 