from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from aiogram.utils.markdown import html_decoration as html
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime
import html as html_escape
import logging

logger = logging.getLogger(__name__)

from config import config, is_admin
from database import db
from keyboards import (get_moderation_keyboard, get_admin_menu_keyboard, get_edit_confirmation_keyboard, 
                       get_drafts_keyboard, get_draft_action_keyboard, get_digest_keyboard, get_digest_navigation_keyboard,
                       get_new_post_keyboard)
from states import ContentModerationStates, AdminStates
from scheduler import scheduler
from aiogram import Bot
from emoji_config import add_emojis_to_post, apply_template, get_emoji, get_random_emoji, safe_html_with_emoji, get_emoji_with_fallback, FALLBACK_EMOJIS
from content_rewriter import rewrite_post
from chatgpt_integration import chatgpt_rewriter, rewrite_post_with_ai, get_manual_rewrite_prompt, READY_PROMPTS

router = Router()

async def safe_edit_message(obj, text: str, parse_mode: str = "HTML", reply_markup=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    –†–∞–±–æ—Ç–∞–µ—Ç —Å CallbackQuery (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) –∏ Message (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        if hasattr(obj, 'message') and hasattr(obj, 'answer'):
            # –≠—Ç–æ CallbackQuery - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await obj.message.edit_text(
                text=text,
                parse_mode=parse_mode,
                reply_markup=reply_markup
            )
        elif hasattr(obj, 'answer'):
            # –≠—Ç–æ Message - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await obj.answer(
                text=text,
                parse_mode=parse_mode,
                reply_markup=reply_markup
            )
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
            logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è safe_edit_message: {type(obj)}")
            
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if hasattr(obj, 'answer') and hasattr(obj, 'message'):
                # –≠—Ç–æ CallbackQuery
                await obj.answer("‚ÑπÔ∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ", show_alert=False)
        else:
            # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –µ—ë
            logger.error(f"–û—à–∏–±–∫–∞ –≤ safe_edit_message: {e}")
            if hasattr(obj, 'answer') and hasattr(obj, 'message'):
                # –≠—Ç–æ CallbackQuery
                await obj.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)
            # –î–ª—è Message –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–µ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å Premium emoji"""
    user_id = message.from_user.id
    
    if is_admin(user_id):
        welcome_emoji = get_emoji("yellow_star")
        brain_emoji = get_emoji("brain")
        tech_emoji = get_emoji("tech")
        sparkle_emoji = get_emoji("sparkle")
        check_emoji = get_emoji("check")
        airplane_emoji = get_emoji("airplane")
        
        await message.answer(
            f"{welcome_emoji} <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>\n\n"
            f"{brain_emoji} –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞:\n"
            f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–∫–∞–Ω–∞–ª—ã, RSS, X)\n"
            f"‚Ä¢ –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
            f"‚Ä¢ –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é AI\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n"
            f"‚Ä¢ –ü—É–±–ª–∏–∫—É–µ—Ç –≤ –≤–∞—à –∫–∞–Ω–∞–ª\n\n"
            f"{tech_emoji} <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            f"/help - –ø–æ–º–æ—â—å\n"
            f"/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
            f"/admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            f"{sparkle_emoji} <i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Premium emoji –∞–∫—Ç–∏–≤–Ω–∞!</i>",
            parse_mode="HTML"
        )
    else:
        wave_emoji = get_emoji("smile")
        lock_emoji = get_emoji("warning")
        
        await message.answer(
            f"{wave_emoji} –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n"
            f"{lock_emoji} –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, "
            "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        )

@router.message(Command("ping"))
async def cmd_ping(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping"""
    await message.answer("üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ <b>Telegram-–±–æ—Ç –ö–æ–Ω—Ç–µ–Ω—Ç-—Ä–µ–¥–∞–∫—Ç–æ—Ä</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
/help - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

<b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>
/admin - –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
/guide - —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä—É—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É
/monitor - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤—Ä—É—á–Ω—É—é
/demo_post - –¥–µ–º–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ—Å—Ç–µ
/prompt - –±—ã—Å—Ç—Ä—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
/manual - –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ + –ø—Ä–æ–º–ø—Ç
/prompts - –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è ChatGPT

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏:</b>
/add_rss [url] - –¥–æ–±–∞–≤–∏—Ç—å RSS-–∏—Å—Ç–æ—á–Ω–∏–∫
/remove_rss [url] - —É–¥–∞–ª–∏—Ç—å RSS-–∏—Å—Ç–æ—á–Ω–∏–∫
/add_tg [@channel] - –¥–æ–±–∞–≤–∏—Ç—å Telegram-–∫–∞–Ω–∞–ª
/remove_tg [@channel] - —É–¥–∞–ª–∏—Ç—å Telegram-–∫–∞–Ω–∞–ª
/list_sources - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º):</b>
1. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
2. –§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
3. –°—Ä–∞–∑—É –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º
4. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–≤–µ—Ç—ã –∏ –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è ChatGPT
5. –í—ã –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ—Ç–µ —á–µ—Ä–µ–∑ ChatGPT –∏ –ø—É–±–ª–∏–∫—É–µ—Ç–µ

<b>–§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b>
‚Ä¢ ‚úÖ –û–¥–æ–±—Ä–∏—Ç—å - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç
‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
‚Ä¢ ‚ùå –£–¥–∞–ª–∏—Ç—å - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ—Å—Ç
    """
    
    await message.answer(help_text, parse_mode="HTML")

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.")
        return
    
    await message.answer(
        "üéõ <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_admin_menu_keyboard()
    )

@router.callback_query(F.data.startswith("approve_"))
async def callback_approve_post(callback: CallbackQuery):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    post_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    post = await db.get_post_by_id(post_id)
    
    if not post:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–æ—Å—Ç —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
    if post.get('status') == 'published':
        warning_emoji = get_emoji("warning")
        success_emoji = get_emoji("check")
        channel_emoji = get_emoji("airplane")
        time_emoji = get_emoji("clock")
        
        await callback.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω", show_alert=True)
        await safe_edit_message(callback,
            f"{warning_emoji} <b>–ü–æ—Å—Ç —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ</b>\n\n"
            f"{success_emoji} –°—Ç–∞—Ç—É—Å: –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n"
            f"{channel_emoji} –ö–∞–Ω–∞–ª: {config.CHANNEL_ID}\n"
            f"{time_emoji} {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –µ—â–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if post.get('status') != 'pending':
        await callback.answer(f"‚ùå –ü–æ—Å—Ç –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{post.get('status')}' –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–æ–±—Ä–µ–Ω", show_alert=True)
        return
    
    # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
    try:
        published_message = await publish_to_channel(callback.bot, post)
        
        if published_message:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            published_id = await db.add_published_post(
                pending_post_id=post_id,
                original_text=post['original_text'],
                published_text=post['rewritten_text'],
                source_url=post['source_url'],
                source_type=post['source_type'],
                channel_id=config.CHANNEL_ID,
                message_id=published_message.message_id
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await db.update_post_status(post_id, "published")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await db.log_action(
                user_id=callback.from_user.id,
                action_type="approve_post",
                target_type="pending_post",
                target_id=post_id,
                details=f"–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {config.CHANNEL_ID}",
                old_value=post['rewritten_text'][:200],
                new_value=f"published_id:{published_id}, message_id:{published_message.message_id}"
            )
            
            safe_text = safe_html_with_emoji(post['rewritten_text'])
            await safe_edit_message(callback,
                f"‚úÖ <b>–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!</b>\n\n"
                f"<i>{safe_text}</i>\n\n"
                f"üîó –°—Å—ã–ª–∫–∞: <a href='https://t.me/{config.CHANNEL_ID.replace('@', '')}/{published_message.message_id}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É</a>",
                parse_mode="HTML"
            )
            
            await callback.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª", show_alert=True)

@router.callback_query(F.data.startswith("edit_"))
async def callback_edit_post(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    post_id = int(callback.data.split("_")[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
    post = await db.get_post_by_id(post_id)
    if not post:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if post.get('status') != 'pending':
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç", show_alert=True)
        return
    
    await state.set_state(ContentModerationStates.editing_content)
    await state.update_data(post_id=post_id)
    
    await safe_edit_message(callback,
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n<i>{post['rewritten_text']}</i>\n\n"
        f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞:",
        parse_mode="HTML"
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("delete_"))
async def callback_delete_post(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    post_id = int(callback.data.split("_")[1])
    post = await db.get_pending_post(post_id)
    
    if post:
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        await db.log_action(
            user_id=callback.from_user.id,
            action_type="reject_post",
            target_type="pending_post",
            target_id=post_id,
            details="–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            old_value=post['rewritten_text'][:200],
            new_value="rejected"
        )
    
    await db.update_post_status(post_id, "deleted")
    
    await safe_edit_message(callback,
        "‚ùå <b>–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
        "–ü–æ—Å—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
        parse_mode="HTML"
    )
    
    await callback.answer("‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω")

@router.message(StateFilter(ContentModerationStates.editing_content))
async def handle_post_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    post_id = data.get("post_id")
    
    if not post_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    new_text = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    post = await db.get_pending_post(post_id)
    old_text = post['rewritten_text'] if post else ""
    
    await db.update_post_text(post_id, new_text)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    await db.log_action(
        user_id=message.from_user.id,
        action_type="edit_post",
        target_type="pending_post",
        target_id=post_id,
        details="–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω",
        old_value=old_text[:200],
        new_value=new_text[:200]
    )
    
    safe_new_text = safe_html_with_emoji(new_text)
    await safe_edit_message(message,
        f"‚úèÔ∏è <b>–ü–æ—Å—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω</b>\n\n"
        f"<b>–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b>\n<i>{safe_new_text}</i>\n\n"
        f"–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –ø–æ—Å—Ç–æ–º?",
        parse_mode="HTML",
        reply_markup=get_moderation_keyboard(post_id)
    )
    
    await state.clear()

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
async def create_demo_post():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å Premium emoji"""
    original_text = "Bitcoin price has reached new highs today, breaking the $50,000 barrier for the first time since last year."
    
    # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ emoji –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è
    base_rewritten = "–ë–∏—Ç–∫–æ–∏–Ω —Å–Ω–æ–≤–∞ –≤–∑–ª–µ—Ç–∞–µ—Ç! –¶–µ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –æ—Ç–º–µ—Ç–∫—É –≤ $50,000 –≤–ø–µ—Ä–≤—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥. –†—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É —Ä–æ—Å—Ç–∞."
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω "news" –¥–ª—è crypto –Ω–æ–≤–æ—Å—Ç–µ–π
    rewritten_text = apply_template(base_rewritten, "news")
    
    post_id = await db.add_pending_post(
        original_text=original_text,
        rewritten_text=rewritten_text,
        source_url="https://example.com/news",
        source_type="demo"
    )
    
    return post_id

@router.message(Command("demo"))
async def cmd_demo(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –ø–æ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    post_id = await create_demo_post()
    post = await db.get_pending_post(post_id)
    
    await safe_edit_message(message,
        f"üìù <b>–ù–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
        f"<b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<i>{post['original_text']}</i>\n\n"
        f"<b>–ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<i>{post['rewritten_text']}</i>\n\n"
        f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {post['source_url']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_moderation_keyboard(post_id)
    )

@router.message(Command("setup"))
async def cmd_setup(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –≤ –±–∞–∑—É
    keywords_added = 0
    for keyword in config.KEYWORDS:
        try:
            await db.add_keyword(keyword)
            keywords_added += 1
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å Premium emoji
    base_demo_text = 'Telegram –≤—ã–ø—É—Å—Ç–∏–ª –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TON –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ NFT —Ñ—É–Ω–∫—Ü–∏–π. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤ –≤–∏–¥–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.'
    demo_text_with_emoji = apply_template(base_demo_text, "update")
    
    demo_draft_id = await db.add_content_draft(
        source_type='demo',
        source_name='–î–µ–º–æ –∏—Å—Ç–æ—á–Ω–∏–∫',
        original_text=demo_text_with_emoji,
        source_url='https://example.com/demo',
        source_date=datetime.now().isoformat(),
        keywords_matched=['Telegram', 'TON', 'NFT', '–ø–æ–¥–∞—Ä–∫–∏', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞']
    )
    
    target_emoji = get_emoji("yellow_star")
    success_emoji = get_emoji("check")
    brain_emoji = get_emoji("brain")
    sparkle_emoji = get_emoji("sparkle")
    
    await safe_edit_message(message,
        f"{target_emoji} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"{success_emoji} –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {keywords_added}\n"
        f"{success_emoji} –°–æ–∑–¥–∞–Ω –¥–µ–º–æ-—á–µ—Ä–Ω–æ–≤–∏–∫ #{demo_draft_id}\n"
        f"{success_emoji} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n"
        f"{sparkle_emoji} Premium emoji –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã\n\n"
        f"{brain_emoji} <b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:</b>\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        f"‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
        f"–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telethon.",
        parse_mode="HTML"
    )

@router.message(Command("queue"))
async def cmd_queue(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    drafts = await db.get_content_drafts(status='new', limit=20)
    
    if not drafts:
        await safe_edit_message(message,
            "üì≠ <b>–û—á–µ—Ä–µ–¥—å —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –ø—É—Å—Ç–∞</b>\n\n"
            "–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è.",
            parse_mode="HTML"
        )
        return
    
    text = f"üìã <b>–û—á–µ—Ä–µ–¥—å —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ ({len(drafts)})</b>\n\n"
    
    for i, draft in enumerate(drafts[:10], 1):
        source_emoji = "üì°" if draft['source_type'] == 'rss' else "üí¨"
        safe_source_name = safe_html_with_emoji(draft['source_name'])
        safe_text = safe_html_with_emoji(draft['original_text'][:80])
        
        text += f"{i}. {source_emoji} <b>{safe_source_name}</b>\n"
        text += f"üìÖ {draft['source_date'][:10] if draft['source_date'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        text += f"üîç {draft['keywords_matched']}\n"
        text += f"üìù {safe_text}{'...' if len(draft['original_text']) > 80 else ''}\n\n"
    
    if len(drafts) > 10:
        text += f"... –∏ –µ—â–µ {len(drafts) - 10} —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤"
    
    await safe_edit_message(message, text, parse_mode="HTML")

@router.message(Command("last"))
async def cmd_last(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    published_posts = await db.get_last_published_posts(limit=10)
    
    if not published_posts:
        await safe_edit_message(message,
            "üì≠ <b>–ù–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤</b>\n\n"
            "–ü–æ–∫–∞ –Ω–∏ –æ–¥–∏–Ω –ø–æ—Å—Ç –Ω–µ –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.",
            parse_mode="HTML"
        )
        return
    
    text = f"üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã ({len(published_posts)})</b>\n\n"
    
    for i, post in enumerate(published_posts[:5], 1):
        safe_text = safe_html_with_emoji(post['published_text'][:100])
        published_date = post['published_at'][:19] if post['published_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        text += f"{i}. <b>–ü–æ—Å—Ç #{post['id']}</b>\n"
        text += f"üìÖ {published_date}\n"
        text += f"üìù {safe_text}{'...' if len(post['published_text']) > 100 else ''}\n"
        if post['message_id'] and config.CHANNEL_ID:
            channel_username = config.CHANNEL_ID.replace('@', '')
            text += f"üîó <a href='https://t.me/{channel_username}/{post['message_id']}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É</a>\n"
        text += "\n"
    
    if len(published_posts) > 5:
        text += f"... –∏ –µ—â–µ {len(published_posts) - 5} –ø–æ—Å—Ç–æ–≤"
    
    await safe_edit_message(message, text, parse_mode="HTML")

@router.message(Command("stats"))
async def cmd_stats_detailed(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    try:
        stats = await db.get_comprehensive_stats()
        
        text = f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
        text += f"üìã <b>–ß–µ—Ä–Ω–æ–≤–∏–∫–∏:</b>\n"
        drafts = stats.get('drafts', {})
        text += f"‚Ä¢ –ù–æ–≤—ã–µ: {drafts.get('new', 0)}\n"
        text += f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ: {drafts.get('processed', 0)}\n"
        text += f"‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω—ã–µ: {drafts.get('deleted', 0)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤
        text += f"üìù <b>–ü–æ—Å—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b>\n"
        posts = stats.get('posts', {})
        text += f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {posts.get('pending', 0)}\n"
        text += f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ: {posts.get('approved', 0)}\n"
        text += f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ: {posts.get('published', 0)}\n"
        text += f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ: {posts.get('deleted', 0)}\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        text += f"üì∞ <b>–ü—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {stats.get('published_total', 0)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        text += f"üì° <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b> {len(config.RSS_SOURCES)} RSS + {len(config.TG_CHANNELS)} Telegram\n"
        text += f"üîç <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {len(config.KEYWORDS)} —Å–ª–æ–≤\n"
        text += f"üì∞ <b>RSS –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ, –ù–æ–≤–æ—Å—Ç–Ω—ã–µ, –°–æ–æ–±—â–µ—Å—Ç–≤–æ, Twitter-–ø—Ä–æ–∫—Å–∏\n"
        text += f"üì° <b>TG –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ, –ù–æ–≤–æ—Å—Ç–Ω—ã–µ, –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ, –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
        daily = stats.get('daily_published', {})
        if daily:
            text += f"\nüìÖ <b>–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
            for date, count in list(daily.items())[:7]:
                text += f"‚Ä¢ {date}: {count}\n"
        
        await safe_edit_message(message, text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await safe_edit_message(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", parse_mode="HTML")

@router.message(Command("settings"))
async def cmd_settings(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    try:
        keywords = await db.get_keywords()
        
        text = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        text += f"ü§ñ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        text += f"‚Ä¢ Admin ID: {config.ADMIN_ID}\n"
        text += f"‚Ä¢ –ö–∞–Ω–∞–ª: {config.CHANNEL_ID or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        text += f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.DATABASE_URL}\n\n"
        
        # RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        text += f"üì∞ <b>RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(config.RSS_SOURCES)}):</b>\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        main_sources = [
            'https://ton.org/blog/rss.xml',
            'https://tginfo.me/feed/', 
            'https://tonstatus.io/rss',
            'https://mirror.xyz/tonsociety.eth/rss'
        ]
        
        shown_count = 0
        for source in config.RSS_SOURCES:
            if source in main_sources and shown_count < 4:
                if 'ton.org/blog' in source:
                    text += f"‚Ä¢ TON Foundation Blog\n"
                elif 'tginfo.me' in source:
                    text += f"‚Ä¢ TGInfo (Telegram –Ω–æ–≤–æ—Å—Ç–∏)\n"
                elif 'tonstatus.io' in source:
                    text += f"‚Ä¢ TON Status\n"
                elif 'tonsociety.eth' in source:
                    text += f"‚Ä¢ TON Society\n"
                shown_count += 1
        
        if len(config.RSS_SOURCES) > 4:
            text += f"‚Ä¢ ... –∏ –µ—â–µ {len(config.RSS_SOURCES) - 4} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
        
        text += f"‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ '/rss' –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n"
        text += "\n"
        
        # Telegram –∫–∞–Ω–∞–ª—ã
        text += f"üí¨ <b>Telegram –∫–∞–Ω–∞–ª—ã ({len(config.TG_CHANNELS)}):</b>\n"
        for i, channel in enumerate(config.TG_CHANNELS, 1):
            text += f"{i}. {channel}\n"
        text += "\n"
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        text += f"üîç <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ({len(keywords)}):</b>\n"
        keywords_text = ", ".join(keywords[:20])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        if len(keywords) > 20:
            keywords_text += f" ... (+{len(keywords) - 20})"
        text += f"{keywords_text}\n\n"
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ Telethon
        text += f"üì± <b>Telethon:</b>\n"
        if config.API_ID and config.API_HASH:
            text += f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω ‚úÖ\n"
        else:
            text += f"‚Ä¢ –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚ùå\n"
        
        await safe_edit_message(message, text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await safe_edit_message(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", parse_mode="HTML")

@router.message(Command("logs"))
async def cmd_logs(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    try:
        logs = await db.get_action_logs(limit=20)
        
        if not logs:
            await safe_edit_message(message,
                "üì≠ <b>–õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç—ã</b>\n\n"
                "–ü–æ–∫–∞ –Ω–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
                parse_mode="HTML"
            )
            return
        
        text = f"üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è ({len(logs)})</b>\n\n"
        
        for i, log in enumerate(logs[:10], 1):
            action_emoji = {
                'approve_post': '‚úÖ',
                'reject_post': '‚ùå',
                'edit_post': '‚úèÔ∏è',
                'create_post_from_draft': 'üìù',
                'delete_draft': 'üóë'
            }.get(log['action_type'], 'üìã')
            
            action_name = {
                'approve_post': '–û–¥–æ–±—Ä–µ–Ω –ø–æ—Å—Ç',
                'reject_post': '–û—Ç–∫–ª–æ–Ω–µ–Ω –ø–æ—Å—Ç',
                'edit_post': '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ—Å—Ç',
                'create_post_from_draft': '–°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞',
                'delete_draft': '–£–¥–∞–ª–µ–Ω —á–µ—Ä–Ω–æ–≤–∏–∫'
            }.get(log['action_type'], log['action_type'])
            
            log_time = log['created_at'][:19] if log['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            text += f"{action_emoji} <b>{action_name}</b>\n"
            text += f"üìÖ {log_time}\n"
            text += f"üéØ {log['target_type']} #{log['target_id']}\n"
            if log['details']:
                text += f"üí¨ {log['details']}\n"
            text += "\n"
        
        if len(logs) > 10:
            text += f"... –∏ –µ—â–µ {len(logs) - 10} –∑–∞–ø–∏—Å–µ–π"
        
        await safe_edit_message(message, text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        await safe_edit_message(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤", parse_mode="HTML")

@router.message(Command("setdigest"))
async def cmd_setdigest(message: Message, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if args:
        time_str = args[0]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM
        if len(time_str) == 5 and time_str[2] == ':':
            try:
                hours, minutes = map(int, time_str.split(':'))
                if 0 <= hours <= 23 and 0 <= minutes <= 59:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    await db.set_digest_time(config.ADMIN_ID, time_str)
                    
                    await safe_edit_message(message,
                        f"‚è∞ <b>–í—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>\n\n"
                        f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {time_str}\n"
                        f"üìã –î–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3-5 –Ω–æ–≤—ã—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤\n\n"
                        f"–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setdigest off",
                        parse_mode="HTML"
                    )
                    return
            except ValueError:
                pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        if time_str.lower() in ['off', '–æ—Ç–∫–ª—é—á–∏—Ç—å', 'disable']:
            await db.disable_digest(config.ADMIN_ID)
            await safe_edit_message(message,
                "üîï <b>–î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω</b>\n\n"
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
                parse_mode="HTML"
            )
            return
    
    # –ï—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    current_settings = await db.get_digest_settings(config.ADMIN_ID)
    current_time = current_settings['digest_time'] if current_settings else "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
    
    await safe_edit_message(message,
        f"‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
        f"üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}\n\n"
        f"<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
        f"<code>/setdigest 09:00</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è\n"
        f"<code>/setdigest off</code> - –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç\n\n"
        f"<b>–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏:</b> –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)\n"
        f"<b>–ü—Ä–∏–º–µ—Ä:</b> 09:00, 14:30, 18:45",
        parse_mode="HTML"
    )

@router.message(Command("digest"))
async def cmd_digest(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    await safe_edit_message(message, "üì∞ –§–æ—Ä–º–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç...")
    await send_daily_digest(message.bot, config.ADMIN_ID)

@router.message(Command("test_post"))
async def cmd_test_post(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –∏ Premium emoji (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è
    original_text = "–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å: Telegram –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ TON –±–ª–æ–∫—á–µ–π–Ω–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞."
    base_rewritten = "–ë–æ–ª—å—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! Telegram –æ–±—ä—è–≤–∏–ª –æ –Ω–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å TON –±–ª–æ–∫—á–µ–π–Ω–æ–º, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä–æ–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ—Å—Ç—É–ø –∫ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º Web3 –ø—Ä—è–º–æ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ! –û–∂–∏–¥–∞—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –∏ NFT."
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω "update" –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
    rewritten_with_emoji = apply_template(base_rewritten, "update")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
    post_id = await db.add_pending_post(
        original_text=original_text,
        rewritten_text=rewritten_with_emoji,
        source_url="https://example.com/test-news",
        source_type="test"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
    post = await db.get_pending_post(post_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    await send_post_for_moderation(message.bot, config.ADMIN_ID, post)
    
    success_emoji = get_emoji("check")
    await safe_edit_message(message,
        f"{success_emoji} <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        "üì¨ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ–¥–æ–±—Ä–∏—Ç—å –µ–≥–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª.",
        parse_mode="HTML"
    )

async def send_daily_digest(bot: Bot, admin_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏
        drafts = await db.get_digest_drafts(limit=5)
        
        if not drafts:
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await bot.send_message(
                admin_id,
                "üì≠ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç</b>\n\n"
                "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–æ–≤—ã—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.",
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
        text = f"üì∞ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç</b>\n"
        text += f"üìÖ {datetime.now().strftime('%d.%m.%Y')}\n\n"
        text += f"–ù–∞–π–¥–µ–Ω–æ {len(drafts)} –Ω–æ–≤—ã—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:\n\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        await bot.send_message(
            admin_id,
            text,
            parse_mode="HTML",
            reply_markup=get_digest_navigation_keyboard()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for i, draft in enumerate(drafts, 1):
            source_emoji = "üì°" if draft['source_type'] == 'rss' else "üí¨"
            safe_source_name = safe_html_with_emoji(draft['source_name'])
            safe_text = safe_html_with_emoji(draft['original_text'][:150])
            
            draft_text = f"{i}. {source_emoji} <b>{safe_source_name}</b>\n\n"
            draft_text += f"üîç <i>{draft['keywords_matched']}</i>\n\n"
            draft_text += f"üìù {safe_text}{'...' if len(draft['original_text']) > 150 else ''}\n\n"
            draft_text += f"üìÖ {draft['source_date'][:19] if draft['source_date'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
            
            await bot.send_message(
                admin_id,
                draft_text,
                parse_mode="HTML",
                reply_markup=get_digest_keyboard(draft['id'])
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        await db.update_digest_last_sent(admin_id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–∞
        await db.log_action(
            user_id=admin_id,
            action_type="digest_sent",
            target_type="digest",
            target_id=0,
            details=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–∞–π–¥–∂–µ—Å—Ç —Å {len(drafts)} —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏",
            new_value=str(len(drafts))
        )
        
        logger.info(f"–î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {admin_id}, {len(drafts)} —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞
@router.callback_query(F.data.startswith("digest_detail_"))
async def callback_digest_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ –∏–∑ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    draft_id = int(callback.data.split("_")[2])
    draft = await db.get_draft_by_id(draft_id)
    
    if not draft:
        await callback.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    source_emoji = "üì°" if draft['source_type'] == 'rss' else "üí¨"
    safe_source_name = safe_html_with_emoji(draft['source_name'])
    safe_keywords = safe_html_with_emoji(draft['keywords_matched'] or '')
    safe_url = safe_html_with_emoji(draft['source_url'] or '')
    safe_text = safe_html_with_emoji(draft['original_text'])
    
    text = f"üìã <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
    text += f"{source_emoji} <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {safe_source_name}\n"
    text += f"üìÖ <b>–î–∞—Ç–∞:</b> {draft['source_date'][:19] if draft['source_date'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
    text += f"üîç <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {safe_keywords}\n"
    text += f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {safe_url}\n\n"
    text += f"üìù <b>–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n{safe_text}"
    
    await safe_edit_message(callback,
        text,
        parse_mode="HTML",
        reply_markup=get_digest_keyboard(draft_id)
    )

@router.callback_query(F.data.startswith("digest_edit_"))
async def callback_digest_edit(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    draft_id = int(callback.data.split("_")[2])
    draft = await db.get_draft_by_id(draft_id)
    
    if not draft:
        await callback.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    await callback_process_draft(callback)

@router.callback_query(F.data.startswith("digest_delete_"))
async def callback_digest_delete(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    draft_id = int(callback.data.split("_")[2])
    draft = await db.get_draft_by_id(draft_id)
    
    if draft:
        # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        await db.log_action(
            user_id=callback.from_user.id,
            action_type="delete_draft",
            target_type="content_draft",
            target_id=draft_id,
            details="–ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –¥–∞–π–¥–∂–µ—Å—Ç–∞",
            old_value=draft['original_text'][:200],
            new_value="deleted"
        )
    
    await db.update_draft_status(draft_id, 'deleted')
    
    await safe_edit_message(callback,
        "‚ùå <b>–ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª–µ–Ω</b>\n\n"
        "–ü–æ—Å—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –¥–∞–π–¥–∂–µ—Å—Ç–∞.",
        parse_mode="HTML"
    )
    
    await callback.answer("üóë –ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª–µ–Ω")

@router.callback_query(F.data.startswith("digest_publish_"))
async def callback_digest_publish(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –∏–∑ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    draft_id = int(callback.data.split("_")[2])
    draft = await db.get_draft_by_id(draft_id)
    
    if not draft:
        await callback.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –í —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    from content_rewriter import rewrite_post
    rewritten_text = rewrite_post(draft['original_text'], style="auto")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    post_id = await db.add_pending_post(
        original_text=draft['original_text'],
        rewritten_text=rewritten_text,
        source_url=draft['source_url'],
        source_type=draft['source_type']
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    await db.update_draft_status(draft_id, 'processed')
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    await db.log_action(
        user_id=callback.from_user.id,
        action_type="create_post_from_digest",
        target_type="content_draft",
        target_id=draft_id,
        details=f"–°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç #{post_id} –∏–∑ –¥–∞–π–¥–∂–µ—Å—Ç–∞",
        old_value=draft['original_text'][:200],
        new_value=rewritten_text[:200]
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –∏ —Å—Ä–∞–∑—É –ø—É–±–ª–∏–∫—É–µ–º
    post = await db.get_pending_post(post_id)
    if post:
        published_message = await publish_to_channel(callback.bot, post)
        
        if published_message:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            published_id = await db.add_published_post(
                pending_post_id=post_id,
                original_text=post['original_text'],
                published_text=post['rewritten_text'],
                source_url=post['source_url'],
                source_type=post['source_type'],
                channel_id=config.CHANNEL_ID,
                message_id=published_message.message_id
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await db.update_post_status(post_id, "published")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            await db.log_action(
                user_id=callback.from_user.id,
                action_type="quick_publish",
                target_type="pending_post",
                target_id=post_id,
                details=f"–ë—ã—Å—Ç—Ä–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∏–∑ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª {config.CHANNEL_ID}",
                old_value=post['rewritten_text'][:200],
                new_value=f"published_id:{published_id}, message_id:{published_message.message_id}"
            )
            
            channel_username = config.CHANNEL_ID.replace('@', '') if config.CHANNEL_ID.startswith('@') else config.CHANNEL_ID
            safe_text = safe_html_with_emoji(post['rewritten_text'][:100])
            
            await safe_edit_message(callback,
                f"‚úÖ <b>–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!</b>\n\n"
                f"üìù {safe_text}{'...' if len(post['rewritten_text']) > 100 else ''}\n\n"
                f"üîó <a href='https://t.me/{channel_username}/{published_message.message_id}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É</a>",
                parse_mode="HTML"
            )
            
            await callback.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª", show_alert=True)

@router.callback_query(F.data == "refresh_digest")
async def callback_refresh_digest(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await safe_edit_message(callback, "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç...")
    await send_daily_digest(callback.bot, config.ADMIN_ID)

@router.callback_query(F.data == "digest_settings")
async def callback_digest_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    settings = await db.get_digest_settings(config.ADMIN_ID)
    
    if settings:
        text = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
        text += f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {settings['digest_time']}\n"
        text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {settings['last_sent'][:19] if settings['last_sent'] else '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è'}\n"
        text += f"‚úÖ –°—Ç–∞—Ç—É—Å: –í–∫–ª—é—á–µ–Ω\n\n"
        text += f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setdigest –ß–ß:–ú–ú"
    else:
        text = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
        text += f"‚ùå –î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
        text += f"–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setdigest –ß–ß:–ú–ú"
    
    await safe_edit_message(callback, text, parse_mode="HTML")

@router.callback_query(F.data == "add_keywords")
async def callback_add_keywords(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    current_keywords = await db.get_keywords()
    keywords_text = ", ".join(current_keywords[:20])
    if len(current_keywords) > 20:
        keywords_text += f" ... (+{len(current_keywords) - 20})"
    
    text = f"üîç <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏</b>\n\n"
    text += f"<b>–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ({len(current_keywords)}):</b>\n"
    text += f"{keywords_text}\n\n"
    text += f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
    text += f"<i>–ü—Ä–∏–º–µ—Ä: –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞, –±–ª–æ–∫—á–µ–π–Ω, —Ç–æ–∫–µ–Ω</i>"
    
    await safe_edit_message(callback, text, parse_mode="HTML")
    await state.set_state(AdminStates.adding_keywords)

@router.callback_query(F.data == "manage_sources")
async def callback_manage_sources(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text = f"üì° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏</b>\n\n"
    
    # RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    text += f"üì∞ <b>RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(config.RSS_SOURCES)}):</b>\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
    main_sources = [
        'https://ton.org/blog/rss.xml',
        'https://tginfo.me/feed/', 
        'https://tonstatus.io/rss',
        'https://mirror.xyz/tonsociety.eth/rss'
    ]
    
    shown_count = 0
    for source in config.RSS_SOURCES:
        if source in main_sources and shown_count < 4:
            if 'ton.org/blog' in source:
                text += f"‚Ä¢ TON Foundation Blog\n"
            elif 'tginfo.me' in source:
                text += f"‚Ä¢ TGInfo (Telegram –Ω–æ–≤–æ—Å—Ç–∏)\n"
            elif 'tonstatus.io' in source:
                text += f"‚Ä¢ TON Status\n"
            elif 'tonsociety.eth' in source:
                text += f"‚Ä¢ TON Society\n"
            shown_count += 1
    
    if len(config.RSS_SOURCES) > 4:
        text += f"‚Ä¢ ... –∏ –µ—â–µ {len(config.RSS_SOURCES) - 4} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
    
    text += f"‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ '/rss' –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n"
    text += "\n"
    
    # Telegram –∫–∞–Ω–∞–ª—ã
    text += f"üí¨ <b>Telegram –∫–∞–Ω–∞–ª—ã ({len(config.TG_CHANNELS)}):</b>\n"
    for i, channel in enumerate(config.TG_CHANNELS, 1):
        text += f"{i}. {channel}\n"
    text += "\n"
    
    text += f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b>\n"
    text += f"‚Ä¢ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª–µ config.py\n"
    text += f"‚Ä¢ Telegram –∫–∞–Ω–∞–ª—ã —Ç–∞–∫–∂–µ –≤ config.py\n"
    text += f"‚Ä¢ –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
    text += f"üìä <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n"
    text += f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ {config.MONITORING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç\n"
    text += f"‚Ä¢ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 'üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'\n"
    text += f"‚Ä¢ Telegram –∫–∞–Ω–∞–ª–æ–≤: {len(config.TG_CHANNELS)} (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)\n"
    text += f"‚Ä¢ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(config.RSS_SOURCES)}\n"
    text += f"‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ '/channels' –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n"
    text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ '/queue'"
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="manual_monitoring"),
        InlineKeyboardButton(text="üìã –ß–µ—Ä–Ω–æ–≤–∏–∫–∏", callback_data="view_drafts")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
    )
    
    await safe_edit_message(callback, text, parse_mode="HTML", reply_markup=builder.as_markup())

@router.callback_query(F.data == "channel_settings")
async def callback_channel_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
    
    if config.CHANNEL_ID:
        text += f"üì¢ <b>–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:</b> {config.CHANNEL_ID}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            chat_info = await callback.bot.get_chat(config.CHANNEL_ID)
            text += f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω\n"
            text += f"üìä <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {chat_info.title}\n"
            text += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {chat_info.member_count if hasattr(chat_info, 'member_count') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_member = await callback.bot.get_chat_member(config.CHANNEL_ID, callback.bot.id)
            if bot_member.can_post_messages:
                text += f"üîê <b>–ü—Ä–∞–≤–∞:</b> –ï—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é ‚úÖ\n"
            else:
                text += f"üîê <b>–ü—Ä–∞–≤–∞:</b> –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é ‚ùå\n"
                
        except Exception as e:
            text += f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}\n"
            text += f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
    else:
        text += f"‚ùå <b>–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
        text += f"–î–æ–±–∞–≤—å—Ç–µ CHANNEL_ID –≤ —Ñ–∞–π–ª .env\n"
    
    text += f"\nüìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
    text += f"1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
    text += f"2. –í–∫–ª—é—á–∏—Ç–µ –ø—Ä–∞–≤–∞ 'Publish Messages'\n"
    text += f"3. –£–∫–∞–∂–∏—Ç–µ CHANNEL_ID –≤ .env —Ñ–∞–π–ª–µ\n"
    text += f"4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
    text += f"üÜî <b>–§–æ—Ä–º–∞—Ç CHANNEL_ID:</b>\n"
    text += f"‚Ä¢ @username - –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
    text += f"‚Ä¢ -100123456789 - –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
    text += f"üîç –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @userinfobot"
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="test_channel"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
    )
    
    await safe_edit_message(callback, text, parse_mode="HTML", reply_markup=builder.as_markup())

@router.callback_query(F.data == "test_channel")
async def callback_test_channel(callback: CallbackQuery):
    """–¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    if not config.CHANNEL_ID:
        await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", show_alert=True)
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = await callback.bot.send_message(
            config.CHANNEL_ID,
            "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞\n\n–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ."
        )
        
        await callback.answer("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ—Å—Ç
        await db.log_action(
            user_id=callback.from_user.id,
            action_type="test_channel",
            target_type="channel",
            target_id=0,
            details=f"–¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª {config.CHANNEL_ID}",
            new_value=f"message_id:{test_message.message_id}"
        )
        
        channel_username = config.CHANNEL_ID.replace('@', '') if config.CHANNEL_ID.startswith('@') else config.CHANNEL_ID
        
        await safe_edit_message(callback,
            f"‚úÖ <b>–¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–µ–Ω!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {config.CHANNEL_ID}\n"
            f"üìù ID —Å–æ–æ–±—â–µ–Ω–∏—è: {test_message.message_id}\n"
            f"üîó <a href='https://t.me/{channel_username}/{test_message.message_id}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</a>\n\n"
            f"–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤!",
            parse_mode="HTML",
            reply_markup=InlineKeyboardBuilder().row(
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="channel_settings")
            ).as_markup()
        )
        
    except Exception as e:
        await safe_edit_message(callback, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.message(StateFilter(AdminStates.adding_keywords))
async def handle_add_keywords(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    if not is_admin(message.from_user.id):
        return
    
    keywords_text = message.text.strip()
    new_keywords = [kw.strip() for kw in keywords_text.split(',') if kw.strip()]
    
    if not new_keywords:
        await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    added_count = 0
    for keyword in new_keywords:
        try:
            await db.add_keyword(keyword)
            added_count += 1
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    await db.log_action(
        user_id=message.from_user.id,
        action_type="add_keywords",
        target_type="keywords",
        target_id=0,
        details=f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {added_count}",
        new_value=", ".join(new_keywords)
    )
    
    await safe_edit_message(message,
        f"‚úÖ <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã</b>\n\n"
        f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count} –∏–∑ {len(new_keywords)}\n"
        f"üîç –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(new_keywords)}\n\n"
        f"–¢–µ–ø–µ—Ä—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å —ç—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.",
        parse_mode="HTML"
    )
    
    await state.clear()

@router.callback_query(F.data == "view_drafts")
async def callback_view_drafts(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    drafts = await db.get_content_drafts(status='new', limit=10)
    
    if not drafts:
        await safe_edit_message(callback,
            "üì≠ <b>–ù–µ—Ç –Ω–æ–≤—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤</b>\n\n"
            "–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è.",
            parse_mode="HTML",
            reply_markup=get_admin_menu_keyboard()
        )
        return
    
    text = "üìã <b>–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
    
    for i, draft in enumerate(drafts[:5], 1):
        source_emoji = "üì°" if draft['source_type'] == 'rss' else "üí¨"
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º emoji
        safe_source_name = safe_html_with_emoji(draft['source_name'])
        safe_keywords = safe_html_with_emoji(draft['keywords_matched'] or '')
        safe_text = safe_html_with_emoji(draft['original_text'][:100])
        
        text += f"{i}. {source_emoji} <b>{safe_source_name}</b>\n"
        text += f"üìÖ {draft['source_date'][:10] if draft['source_date'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        text += f"üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {safe_keywords}\n"
        text += f"üìù {safe_text}{'...' if len(draft['original_text']) > 100 else ''}\n\n"
    
    text += f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(drafts[:5])} –∏–∑ {len(drafts)} —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤"
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    builder = InlineKeyboardBuilder()
    for i, draft in enumerate(drafts[:5], 1):
        builder.row(
            InlineKeyboardButton(
                text=f"{i}. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å",
                callback_data=f"process_draft_{draft['id']}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="view_drafts"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
    )
    
    await safe_edit_message(callback, text, reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("process_draft_"))
async def callback_process_draft(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    draft_id = int(callback.data.split("_")[2])
    draft = await db.get_draft_by_id(draft_id)
    
    if not draft:
        await callback.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    source_emoji = "üì°" if draft['source_type'] == 'rss' else "üí¨"
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º emoji
    safe_source_name = safe_html_with_emoji(draft['source_name'])
    safe_keywords = safe_html_with_emoji(draft['keywords_matched'] or '')
    safe_url = safe_html_with_emoji(draft['source_url'] or '')
    safe_text = safe_html_with_emoji(draft['original_text'])
    
    text = f"üìã <b>–ß–µ—Ä–Ω–æ–≤–∏–∫ #{draft_id}</b>\n\n"
    text += f"{source_emoji} <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {safe_source_name}\n"
    text += f"üìÖ <b>–î–∞—Ç–∞:</b> {draft['source_date'][:19] if draft['source_date'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
    text += f"üîç <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {safe_keywords}\n"
    text += f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {safe_url}\n\n"
    text += f"üìù <b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<i>{safe_text}</i>"
    
    await safe_edit_message(callback,
        text,
        parse_mode="HTML",
        reply_markup=get_draft_action_keyboard(draft_id)
    )

@router.callback_query(F.data.startswith("rewrite_draft_"))
async def callback_rewrite_draft(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    draft_id = int(callback.data.split("_")[2])
    draft = await db.get_draft_by_id(draft_id)
    
    if not draft:
        await callback.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –í —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    from content_rewriter import rewrite_post
    rewritten_text = rewrite_post(draft['original_text'], style="auto")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    post_id = await db.add_pending_post(
        original_text=draft['original_text'],
        rewritten_text=rewritten_text,
        source_url=draft['source_url'],
        source_type=draft['source_type']
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    await db.update_draft_status(draft_id, 'processed')
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    await db.log_action(
        user_id=callback.from_user.id,
        action_type="create_post_from_draft",
        target_type="content_draft",
        target_id=draft_id,
        details=f"–°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç #{post_id} –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞",
        old_value=draft['original_text'][:200],
        new_value=rewritten_text[:200]
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω—É (–≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    post_data = await db.get_pending_post(post_id)
    if post_data:
        await send_post_for_moderation(callback.bot, config.ADMIN_ID, post_data)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º emoji
    safe_rewritten_text = safe_html_with_emoji(rewritten_text)
    
    await safe_edit_message(callback,
        f"‚úÖ <b>–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>\n\n"
        f"<b>–ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<i>{safe_rewritten_text}</i>\n\n"
        f"üì¨ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("delete_draft_"))
async def callback_delete_draft(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    draft_id = int(callback.data.split("_")[2])
    draft = await db.get_draft_by_id(draft_id)
    
    if draft:
        # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        await db.log_action(
            user_id=callback.from_user.id,
            action_type="delete_draft",
            target_type="content_draft",
            target_id=draft_id,
            details="–ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            old_value=draft['original_text'][:200],
            new_value="deleted"
        )
    
    await db.update_draft_status(draft_id, 'deleted')
    
    await safe_edit_message(callback, "üóë –ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª–µ–Ω")
    await callback_view_drafts(callback)

@router.callback_query(F.data == "manual_monitoring")
async def callback_manual_monitoring(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ä—É—á–Ω—É—é"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await safe_edit_message(callback, "üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    success = await scheduler.run_manual_monitoring()
    
    if success:
        await safe_edit_message(callback,
            "‚úÖ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
            "–ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞–π–¥–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª '–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
            parse_mode="HTML",
            reply_markup=get_admin_menu_keyboard()
        )
    else:
        await safe_edit_message(callback,
            "‚ùå <b>–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.",
            parse_mode="HTML",
            reply_markup=get_admin_menu_keyboard()
        )

@router.callback_query(F.data == "back_to_admin")
async def callback_back_to_admin(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await safe_edit_message(callback,
        "üéõ <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_admin_menu_keyboard()
    )

async def publish_to_channel(bot: Bot, post: dict):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª —Å Premium emoji"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
        if not config.CHANNEL_ID:
            logger.error("CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ emoji
        post_text = post['rewritten_text'].lower()
        if 'airdrop' in post_text or '–ø–æ–¥–∞—Ä–æ–∫' in post_text or '—Ä–∞–∑–¥–∞—á–∞' in post_text:
            template = "airdrop"
        elif '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' in post_text or 'update' in post_text or '—Ä–µ–ª–∏–∑' in post_text:
            template = "update"
        elif '–∞–Ω–∞–ª–∏–∑' in post_text or '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in post_text or 'chart' in post_text:
            template = "analysis"
        else:
            template = "news"
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω emoji –∫ —Ç–µ–∫—Å—Ç—É
        enhanced_text = apply_template(post['rewritten_text'], template)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫–∞–Ω–∞–ª–∞ —Å emoji
        signature_emoji = get_emoji("shine")
        if not enhanced_text.endswith('\n'):
            enhanced_text += '\n'
        enhanced_text += f"\n{signature_emoji} –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!"
        
        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç —Å HTML parse_mode –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ emoji
        message = await bot.send_message(
            chat_id=config.CHANNEL_ID,
            text=enhanced_text,
            parse_mode="HTML"
        )
        
        logger.info(f"–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ {config.CHANNEL_ID} —Å —à–∞–±–ª–æ–Ω–æ–º {template}, message_id: {message.message_id}")
        return message
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        return None

async def send_post_for_moderation(bot: Bot, admin_id: int, post: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –∞–¥–º–∏–Ω—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å Premium emoji"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º Premium emoji –∫ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        enhanced_rewritten = add_emojis_to_post(post['rewritten_text'], style="thematic")
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º emoji
        safe_original = safe_html_with_emoji(post['original_text'])
        safe_rewritten = safe_html_with_emoji(enhanced_rewritten)
        safe_url = safe_html_with_emoji(post.get('source_url', ''))
        
        # –î–æ–±–∞–≤–ª—è–µ–º emoji –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        header_emoji = get_emoji("envelope")
        text = f"{header_emoji} <b>–ù–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
        
        original_emoji = get_emoji("brain")
        text += f"{original_emoji} <b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<i>{safe_original}</i>\n\n"
        
        rewritten_emoji = get_emoji("sparkle")
        text += f"{rewritten_emoji} <b>–ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å emoji:</b>\n<i>{safe_rewritten}</i>\n\n"
        
        if safe_url:
            link_emoji = get_emoji("airplane")
            text += f"{link_emoji} <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {safe_url}\n\n"
        
        action_emoji = get_emoji("yellow_star")
        text += f"{action_emoji} –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        message = await bot.send_message(
            chat_id=admin_id,
            text=text,
            parse_mode="HTML",
            reply_markup=get_moderation_keyboard(post['id'])
        )
        
        logger.info(f"–ü–æ—Å—Ç #{post['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω—É {admin_id}")
        return message
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")
        return None

@router.callback_query(F.data == "stats")
async def callback_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        pub_stats = await db.get_published_posts_stats()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
        drafts_new = await db.get_content_drafts(status='new', limit=1000)
        drafts_processed = await db.get_content_drafts(status='processed', limit=1000)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        pending_posts = await db.get_content_drafts(status='pending', limit=1000)
        
        text = f"ÔøΩÔøΩ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        text += f"üì∞ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:</b>\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ: {pub_stats['total']}\n"
        text += f"‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {pub_stats['last_24h']}\n"
        text += f"‚Ä¢ –ó–∞ 7 –¥–Ω–µ–π: {pub_stats['last_7d']}\n\n"
        text += f"üìã <b>–ß–µ—Ä–Ω–æ–≤–∏–∫–∏:</b>\n"
        text += f"‚Ä¢ –ù–æ–≤—ã–µ: {len(drafts_new)}\n"
        text += f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ: {len(drafts_processed)}\n\n"
        text += f"‚è≥ <b>–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b> {len(pending_posts)}\n\n"
        text += f"üîÑ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> –ö–∞–∂–¥—ã–µ {config.MONITORING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç\n"
        text += f"üì° <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b> {len(config.RSS_SOURCES)} RSS + {len(config.TG_CHANNELS)} Telegram\n"
        text += f"üîç <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {len(config.KEYWORDS)} —Å–ª–æ–≤\n"
        text += f"üì∞ <b>RSS –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ, –ù–æ–≤–æ—Å—Ç–Ω—ã–µ, –°–æ–æ–±—â–µ—Å—Ç–≤–æ, Twitter-–ø—Ä–æ–∫—Å–∏\n"
        text += f"üì° <b>TG –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ, –ù–æ–≤–æ—Å—Ç–Ω—ã–µ, –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ, –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ\n"
        
        await safe_edit_message(callback,
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardBuilder().row(
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            ).as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await safe_edit_message(callback, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@router.message(Command("emoji"))
async def cmd_emoji(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Premium emoji (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã emoji
    text = f"{get_emoji('yellow_star')} <b>–¢–µ—Å—Ç Premium Emoji</b>\n\n"
    
    text += f"{get_emoji('brain')} <b>–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ emoji:</b>\n"
    text += f"‚Ä¢ –ë–ª–æ–∫—á–µ–π–Ω: {get_emoji('diamond')}\n"
    text += f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: {get_emoji('reload')}\n"
    text += f"‚Ä¢ –ü–æ–¥–∞—Ä–∫–∏: {get_emoji('gift')}\n"
    text += f"‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {get_emoji('tech')}\n"
    text += f"‚Ä¢ –£—Å–ø–µ—Ö: {get_emoji('check')}\n\n"
    
    text += f"{get_emoji('sparkle')} <b>–°–ª—É—á–∞–π–Ω—ã–µ emoji:</b>\n"
    for i in range(5):
        text += f"‚Ä¢ {get_random_emoji()}\n"
    
    text += f"\n{get_emoji('heart')} <b>–®–∞–±–ª–æ–Ω—ã –ø–æ—Å—Ç–æ–≤:</b>\n"
    
    # –î–µ–º–æ –Ω–æ–≤–æ—Å—Ç–µ–π
    news_demo = "TON –±–ª–æ–∫—á–µ–π–Ω –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç"
    text += f"\nüì∞ <b>News —à–∞–±–ª–æ–Ω:</b>\n"
    text += f"{apply_template(news_demo, 'news')}\n"
    
    # –î–µ–º–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_demo = "Telegram –≤—ã–ø—É—Å—Ç–∏–ª –≤–∞–∂–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    text += f"\nüîÑ <b>Update —à–∞–±–ª–æ–Ω:</b>\n"
    text += f"{apply_template(update_demo, 'update')}\n"
    
    # –î–µ–º–æ airdrop
    airdrop_demo = "–ù–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    text += f"\nüéÅ <b>Airdrop —à–∞–±–ª–æ–Ω:</b>\n"
    text += f"{apply_template(airdrop_demo, 'airdrop')}\n"
    
    await safe_edit_message(message, text, parse_mode="HTML")

@router.message(Command("test_duplicate"))
async def cmd_test_duplicate(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    test_text = "–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤"
    base_rewritten = "–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç—å '–û–¥–æ–±—Ä–∏—Ç—å' –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑."
    rewritten_with_emoji = apply_template(base_rewritten, "news")
    
    post_id = await db.add_pending_post(
        original_text=test_text,
        rewritten_text=rewritten_with_emoji,
        source_url="https://example.com/test-duplicate",
        source_type="test_duplicate"
    )
    
    post = await db.get_post_by_id(post_id)
    
    if post:
        await send_post_for_moderation(message.bot, config.ADMIN_ID, post)
        
        test_emoji = get_emoji("check")
        warning_emoji = get_emoji("warning")
        
        await safe_edit_message(message,
            f"{test_emoji} <b>–¢–µ—Å—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìù ID –ø–æ—Å—Ç–∞: {post_id}\n"
            f"üì¨ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n\n"
            f"{warning_emoji} <b>–ö–∞–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:</b>\n"
            f"1. –ù–∞–∂–º–∏—Ç–µ '–û–¥–æ–±—Ä–∏—Ç—å' ‚Üí –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫—É–µ—Ç—Å—è\n"
            f"2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å '–û–¥–æ–±—Ä–∏—Ç—å' –µ—â–µ —Ä–∞–∑\n"
            f"3. –î–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
            f"‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!",
            parse_mode="HTML"
        )
    else:
        await safe_edit_message(message, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞")

@router.message(Command("interval"))
async def cmd_set_monitoring_interval(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        clock_emoji = get_emoji("clock") 
        settings_emoji = get_emoji("tech")
        info_emoji = get_emoji("brain")
        
        text = f"{settings_emoji} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
        text += f"{clock_emoji} <b>–¢–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:</b>\n"
        text += f"‚Ä¢ –û–±—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {config.MONITORING_INTERVAL_MINUTES} –º–∏–Ω\n"
        text += f"‚Ä¢ RSS –ø—Ä–æ–≤–µ—Ä–∫–∞: {config.RSS_CHECK_INTERVAL_MINUTES} –º–∏–Ω\n"
        text += f"‚Ä¢ Telegram –ø—Ä–æ–≤–µ—Ä–∫–∞: {config.TG_CHECK_INTERVAL_MINUTES} –º–∏–Ω\n\n"
        
        text += f"{info_emoji} <b>–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å:</b>\n"
        text += f"‚Ä¢ `/interval 3` - –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª 3 –º–∏–Ω—É—Ç—ã\n"
        text += f"‚Ä¢ `/interval urgent` - —Ä–µ–∂–∏–º —Å—Ä–æ—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (1-2 –º–∏–Ω)\n"
        text += f"‚Ä¢ `/interval normal` - –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (5-7 –º–∏–Ω)\n"
        text += f"‚Ä¢ `/interval slow` - –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (15-30 –º–∏–Ω)\n\n"
        
        warning_emoji = get_emoji("warning")
        text += f"{warning_emoji} <i>–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞</i>"
        
        await safe_edit_message(message, text, parse_mode="HTML")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    command = args[0].lower()
    
    if command == "urgent":
        new_interval = 2
        rss_interval = 1
        tg_interval = 3
        mode_name = "üî• –°—Ä–æ—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"
    elif command == "normal":
        new_interval = 5
        rss_interval = 3
        tg_interval = 7
        mode_name = "‚ö° –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º"
    elif command == "slow":
        new_interval = 15
        rss_interval = 10
        tg_interval = 20
        mode_name = "üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"
    elif command.isdigit():
        new_interval = int(command)
        if new_interval < 1 or new_interval > 60:
            await message.answer("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 60 –º–∏–Ω—É—Ç")
            return
        rss_interval = max(1, new_interval - 2)
        tg_interval = new_interval + 2
        mode_name = f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ({new_interval} –º–∏–Ω)"
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: urgent, normal, slow –∏–ª–∏ —á–∏—Å–ª–æ")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ config (–≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
    config.MONITORING_INTERVAL_MINUTES = new_interval
    config.RSS_CHECK_INTERVAL_MINUTES = rss_interval
    config.TG_CHECK_INTERVAL_MINUTES = tg_interval
    
    success_emoji = get_emoji("check")
    rocket_emoji = get_emoji("airplane")
    
    await safe_edit_message(message,
        f"{success_emoji} <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
        f"{rocket_emoji} <b>–†–µ–∂–∏–º:</b> {mode_name}\n"
        f"‚Ä¢ –û–±—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {new_interval} –º–∏–Ω\n"
        f"‚Ä¢ RSS: {rss_interval} –º–∏–Ω\n"
        f"‚Ä¢ Telegram: {tg_interval} –º–∏–Ω\n\n"
        f"‚ú® <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã!</b> –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ {new_interval} –º–∏–Ω—É—Ç.\n\n"
        f"üí° <i>–î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –≤ .env:</i>\n"
        f"`MONITORING_INTERVAL_MINUTES={new_interval}`",
        parse_mode="HTML"
    )

@router.message(Command("test_emoji"))
async def cmd_test_emoji(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Premium emoji (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å emoji –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_original = "–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Premium emoji"
    test_rewritten = apply_template("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Premium emoji —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏, –∞ –Ω–µ –∫–∞–∫ HTML —Ç–µ–≥–∏.", "news")
    
    post_id = await db.add_pending_post(
        original_text=test_original,
        rewritten_text=test_rewritten,
        source_url="https://example.com/test-emoji",
        source_type="test_emoji"
    )
    
    post = await db.get_post_by_id(post_id)
    
    if post:
        await send_post_for_moderation(message.bot, config.ADMIN_ID, post)
        
        success_emoji = get_emoji("check")
        sparkle_emoji = get_emoji("sparkle")
        warning_emoji = get_emoji("warning")
        
        await safe_edit_message(message,
            f"{success_emoji} <b>–¢–µ—Å—Ç Premium emoji —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìù ID –ø–æ—Å—Ç–∞: {post_id}\n"
            f"üì¨ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n\n"
            f"{sparkle_emoji} <b>–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:</b>\n"
            f"1. –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ emoji\n"
            f"2. –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å HTML —Ç–µ–≥–æ–≤ —Ç–∏–ø–∞ `&lt;tg-emoji&gt;`\n"
            f"3. –ü—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ emoji –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è\n\n"
            f"{warning_emoji} <i>–ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ HTML —Ç–µ–≥–∏ - emoji –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç</i>\n"
            f"‚úÖ <i>–ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ - –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!</i>",
            parse_mode="HTML"
        )
    else:
        await safe_edit_message(message, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞")

@router.message(Command("channels"))
async def cmd_check_channels(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    channels_emoji = get_emoji("tower")
    check_emoji = get_emoji("check")
    warning_emoji = get_emoji("warning")
    
    text = f"{channels_emoji} <b>–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
    text += f"üìä <b>–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤:</b> {len(config.TG_CHANNELS)}\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    official_channels = [
        '@durov', '@telegram', '@toncoin'
    ]
    
    news_channels = [
        '@tginfo', '@cryptotonhunter', '@ton_society', 
        '@ton_blockchain', '@tonstatus'
    ]
    
    analytics_channels = [
        '@Exploitex', '@the_club_100', '@cryptover1'
    ]
    
    specialized_channels = [
        '@toncaps', '@tap2earn_ru', '@tonnft', '@gifts_ru'
    ]
    
    text += f"üè¢ <b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ ({len(official_channels)}):</b>\n"
    for channel in official_channels:
        text += f"‚Ä¢ {channel}\n"
    
    text += f"\nüì∞ <b>–ù–æ–≤–æ—Å—Ç–Ω—ã–µ ({len(news_channels)}):</b>\n"
    for channel in news_channels:
        text += f"‚Ä¢ {channel}\n"
    
    text += f"\nüìà <b>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ ({len(analytics_channels)}):</b>\n"
    for channel in analytics_channels:
        text += f"‚Ä¢ {channel}\n"
    
    text += f"\nüéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ({len(specialized_channels)}):</b>\n"
    for channel in specialized_channels:
        text += f"‚Ä¢ {channel}\n"
    
    # –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    categorized = official_channels + news_channels + analytics_channels + specialized_channels
    other_channels = [ch for ch in config.TG_CHANNELS if ch not in categorized]
    
    if other_channels:
        text += f"\nüîπ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ({len(other_channels)}):</b>\n"
        for channel in other_channels:
            text += f"‚Ä¢ {channel}\n"
    
    text += f"\n{check_emoji} <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
    text += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {config.TG_CHECK_INTERVAL_MINUTES} –º–∏–Ω\n"
    text += f"‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑: {config.MONITORING_INTERVAL_MINUTES} –º–∏–Ω\n"
    text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n"
    
    text += f"{warning_emoji} <b>–í–∞–∂–Ω–æ:</b>\n"
    text += f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º\n"
    text += f"‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞–Ω–∞–ª—ã –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏\n"
    text += f"‚Ä¢ –ö–∞–Ω–∞–ª—ã —Å –ø–æ–º–µ—Ç–∫–æ–π '—Ä–µ—Ñ' –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏"
    
    await safe_edit_message(message, text, parse_mode="HTML")

@router.message(Command("test_keywords"))
async def cmd_test_keywords(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    from content_monitor import content_monitor
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    test_cases = [
        # –¢–µ—Å—Ç –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ)
        "–í –Ω–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–∏—á–∏",  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Üí –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        "–ó–∞–ø—É—Å–∫–∏ –Ω–æ–≤—ã—Ö –±–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è",   # –∑–∞–ø—É—Å–∫ ‚Üí –∑–∞–ø—É—Å–∫–∏, –±–æ—Ç ‚Üí –±–æ—Ç—ã  
        "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è",     # –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Üí –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ
        
        # –¢–µ—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ª–æ–≤ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        "–ù–æ–≤—ã–π –±–æ—Ç –æ—Ç Telegram",              # –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏: –±–æ—Ç, Telegram
        "–†–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ",                   # –ù–ï –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ "–±–æ—Ç" –≤ "—Ä–∞–±–æ—Ç–∞–µ—Ç"
        "–¢–æ–Ω –º—É–∑—ã–∫–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è",               # –ù–ï –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ "—Ç–æ–Ω" (–∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–æ TON)
        
        # –¢–µ—Å—Ç —Ñ—Ä–∞–∑
        "TG Premium —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω",         # –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏: TG Premium
        "Telegram Gifts –∑–∞–ø—É—â–µ–Ω—ã",            # –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏: Telegram, Gifts
        
        # –¢–µ—Å—Ç —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤
        "–†–∞–∑–¥–∞—á–∏ –∏ –ø–æ–¥–∞—Ä–∫–∏ –æ—Ç –î—É—Ä–æ–≤–∞",       # –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏: —Ä–∞–∑–¥–∞—á–∞, –ø–æ–¥–∞—Ä–∫–∏
        "–ù–§–¢ –∫–æ–ª–ª–µ–∫—Ü–∏—è –≥–æ—Ç–æ–≤–∞",               # –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏: –ù–§–¢
    ]
    
    search_emoji = get_emoji("brain")
    check_emoji = get_emoji("check") 
    cross_emoji = get_emoji("cross")
    
    text = f"{search_emoji} <b>–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤</b>\n\n"
    text += f"üìä <b>–í—Å–µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:</b> {len(config.KEYWORDS)}\n\n"
    
    for i, test_text in enumerate(test_cases, 1):
        found_keywords = content_monitor.check_keywords(test_text)
        
        if found_keywords:
            text += f"{check_emoji} <b>–¢–µ—Å—Ç {i}:</b>\n"
            text += f"üìù –¢–µ–∫—Å—Ç: <i>{test_text}</i>\n"
            text += f"üîç –ù–∞–π–¥–µ–Ω–æ: {', '.join(found_keywords[:5])}"
            if len(found_keywords) > 5:
                text += f" (+{len(found_keywords) - 5})"
            text += f"\n\n"
        else:
            text += f"{cross_emoji} <b>–¢–µ—Å—Ç {i}:</b>\n"
            text += f"üìù –¢–µ–∫—Å—Ç: <i>{test_text}</i>\n"
            text += f"üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    english_keywords = [kw for kw in config.KEYWORDS if all(ord(c) < 128 for c in kw if c.isalpha())]
    russian_keywords = [kw for kw in config.KEYWORDS if any(ord(c) >= 1024 for c in kw)]
    phrases = [kw for kw in config.KEYWORDS if ' ' in kw]
    
    text += f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:</b>\n"
    text += f"‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ: {len(english_keywords)}\n"
    text += f"‚Ä¢ –†—É—Å—Å–∫–∏–µ: {len(russian_keywords)}\n"
    text += f"‚Ä¢ –§—Ä–∞–∑—ã: {len(phrases)}\n\n"
    
    text += f"üí° <b>–õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞:</b>\n"
    text += f"‚Ä¢ –§—Ä–∞–∑—ã: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ\n"
    text += f"‚Ä¢ –î–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (5+): –ø–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏\n"
    text += f"‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ (3-4): –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤\n\n"
    
    text += f"üß™ <b>–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã:</b>\n"
    text += f"‚Ä¢ '–∑–∞–ø—É—Å–∫' –Ω–∞–π–¥–µ—Ç '–∑–∞–ø—É—Å–∫–∏', '–∑–∞–ø—É—Å–∫–∞'\n"
    text += f"‚Ä¢ '–±–æ—Ç' –ù–ï –Ω–∞–π–¥–µ—Ç –≤ —Å–ª–æ–≤–µ '—Ä–∞–±–æ—Ç–∞'\n"
    text += f"‚Ä¢ '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' –Ω–∞–π–¥–µ—Ç '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'"
    
    await safe_edit_message(message, text, parse_mode="HTML")

@router.message(Command("rss"))
async def cmd_check_rss(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    rss_emoji = get_emoji("tower")
    check_emoji = get_emoji("check")
    warning_emoji = get_emoji("warning")
    
    text = f"{rss_emoji} <b>–°—Ç–∞—Ç—É—Å RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</b>\n\n"
    text += f"üìä <b>–í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b> {len(config.RSS_SOURCES)}\n\n"
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    categories = {
        "üè¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ TON": [
            'https://ton.org/blog/rss.xml',
            'https://ton.org/rss.xml'
        ],
        "üì∞ –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã": [
            'https://tginfo.me/feed/',
            'https://tonstatus.io/rss'
        ],
        "üåê –≠–∫–æ—Å–∏—Å—Ç–µ–º–∞ –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ": [
            'https://mirror.xyz/tonsociety.eth/rss',
            'https://medium.com/feed/@tonblockchain',
            'https://tonwhales.com/blog/rss.xml'
        ],
        "üê¶ Twitter —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏": [
            'https://nitter.net/telegram/rss',
            'https://rsshub.app/twitter/user/ton_blockchain',
            'https://rsshub.app/twitter/user/durov',
            'https://nitter.net/durov/rss'
        ]
    }
    
    for category, sources in categories.items():
        count = len([s for s in sources if s in config.RSS_SOURCES])
        text += f"{category} <b>({count}):</b>\n"
        
        for source in sources:
            if source in config.RSS_SOURCES:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                if 'ton.org/blog' in source:
                    name = "TON Foundation Blog"
                elif 'ton.org/rss' in source:
                    name = "TON Foundation"
                elif 'tginfo.me' in source:
                    name = "TGInfo"
                elif 'tonstatus.io' in source:
                    name = "TON Status"
                elif 'tonsociety.eth' in source:
                    name = "TON Society"
                elif 'tonblockchain' in source:
                    name = "TON Community"
                elif 'tonwhales.com' in source:
                    name = "TON Whales"
                elif 'telegram/rss' in source:
                    name = "Telegram (Nitter)"
                elif 'ton_blockchain' in source:
                    name = "TON (RSSHub)"
                elif 'durov' in source and 'rsshub' in source:
                    name = "Durov (RSSHub)"
                elif 'durov' in source and 'nitter' in source:
                    name = "Durov (Nitter)"
                else:
                    name = source.split('/')[2] if '/' in source else source
                
                text += f"‚Ä¢ {name}\n"
        text += "\n"
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    categorized_sources = []
    for sources in categories.values():
        categorized_sources.extend(sources)
    
    other_sources = [s for s in config.RSS_SOURCES if s not in categorized_sources]
    if other_sources:
        text += f"üîπ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ({len(other_sources)}):</b>\n"
        for source in other_sources:
            domain = source.split('/')[2] if '/' in source else source
            text += f"‚Ä¢ {domain}\n"
        text += "\n"
    
    text += f"{check_emoji} <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ RSS:</b>\n"
    text += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {config.RSS_CHECK_INTERVAL_MINUTES} –º–∏–Ω\n"
    text += f"‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑: {config.MONITORING_INTERVAL_MINUTES} –º–∏–Ω\n"
    text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n"
    
    text += f"{warning_emoji} <b>–í–∞–∂–Ω–æ:</b>\n"
    text += f"‚Ä¢ Nitter –º–æ–∂–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
    text += f"‚Ä¢ RSSHub —Ç—Ä–µ–±—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
    text += f"‚Ä¢ Medium –º–æ–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n"
    text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '/admin' ‚Üí '–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
    
    await safe_edit_message(message, text, parse_mode="HTML")

@router.message(Command("debug_emoji"))
async def cmd_debug_emoji(message: Message):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ emoji (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    from emoji_config import get_emoji_with_fallback, FALLBACK_EMOJIS
    
    # –¢–µ—Å—Ç 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Premium –∏ –æ–±—ã—á–Ω—ã—Ö emoji
    await safe_edit_message(message,
        f"üîç <b>–¢–µ—Å—Ç 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ emoji</b>\n\n"
        f"<b>Premium emoji:</b> {get_emoji('yellow_star')} {get_emoji('check')} {get_emoji('heart')}\n"
        f"<b>–û–±—ã—á–Ω—ã–µ emoji:</b> ‚≠ê ‚úÖ ‚ù§Ô∏è\n\n"
        f"<b>–ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ:</b> Premium emoji –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç\n"
        f"<b>–ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ:</b> Premium emoji —Ä–∞–±–æ—Ç–∞—é—Ç!",
        parse_mode="HTML"
    )
    
    # –¢–µ—Å—Ç 2: –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    premium_star = get_emoji("yellow_star")
    await safe_edit_message(message,
        f"üîç <b>–¢–µ—Å—Ç 2: –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</b>\n\n"
        f"<b>–°—ã—Ä–æ–π HTML –∫–æ–¥:</b>\n"
        f"<code>{premium_star}</code>\n\n"
        f"<b>–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b>\n"
        f"{premium_star} ‚Üê –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–≤–µ–∑–¥–∞\n\n"
        f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ parse_mode:</b> HTML –∞–∫—Ç–∏–≤–µ–Ω",
        parse_mode="HTML"
    )
    
    # –¢–µ—Å—Ç 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    await safe_edit_message(message,
        f"üîç <b>–¢–µ—Å—Ç 3: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        f"‚Ä¢ ID: {message.from_user.id}\n"
        f"‚Ä¢ Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚Ä¢ –ò–º—è: {message.from_user.first_name}\n"
        f"‚Ä¢ –Ø–∑—ã–∫: {message.from_user.language_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"üì± <b>Premium emoji –ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç –≤:</b>\n"
        f"‚ùå –í–µ–±-–≤–µ—Ä—Å–∏–∏ Telegram (web.telegram.org)\n"
        f"‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥–µ—Å–∫—Ç–æ–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö\n"
        f"‚ùå –°—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n\n"
        f"‚úÖ <b>Premium emoji —Ä–∞–±–æ—Ç–∞—é—Ç –≤:</b>\n"
        f"‚úÖ –ú–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö (iOS/Android)\n"
        f"‚úÖ Telegram Desktop (–Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏)\n"
        f"‚úÖ –¢–æ–ª—å–∫–æ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ emoji ID",
        parse_mode="HTML"
    )
    
    # –¢–µ—Å—Ç 4: Fallback —Ä–µ–∂–∏–º
    await safe_edit_message(message,
        f"üîç <b>–¢–µ—Å—Ç 4: –†–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</b>\n\n"
        f"<b>–° Premium emoji:</b>\n"
        f"{get_emoji_with_fallback('yellow_star', True)} –í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        f"{get_emoji_with_fallback('check', True)} –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞\n"
        f"{get_emoji_with_fallback('heart', True)} –ù—Ä–∞–≤–∏—Ç—Å—è\n\n"
        f"<b>–¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ emoji:</b>\n"
        f"{get_emoji_with_fallback('yellow_star', False)} –í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        f"{get_emoji_with_fallback('check', False)} –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞\n"
        f"{get_emoji_with_fallback('heart', False)} –ù—Ä–∞–≤–∏—Ç—Å—è\n\n"
        f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!",
        parse_mode="HTML"
    )

@router.message(Command("test_rewrite"))
async def cmd_test_rewrite(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    test_cases = [
        {
            "type": "–ù–æ–≤–æ—Å—Ç–∏",
            "original": "Telegram –æ–±—ä—è–≤–ª—è–µ—Ç –æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–µ —Å TON Foundation –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä",
            "style": "news"
        },
        {
            "type": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 
            "original": "–í—ã–ø—É—â–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è Telegram —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Premium emoji –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–æ–≤",
            "style": "update"
        },
        {
            "type": "Airdrop",
            "original": "–ó–∞–ø—É—â–µ–Ω–∞ —Ä–∞–∑–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–æ–≤ TON –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram Premium",
            "style": "airdrop"
        },
        {
            "type": "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç",
            "original": "TON —Ä–∞—Å—Ç–µ—Ç –≤ —Ü–µ–Ω–µ",
            "style": "auto"
        }
    ]
    
    test_emoji = get_emoji("brain")
    await safe_edit_message(message,
        f"{test_emoji} <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è</b>\n\n"
        f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...",
        parse_mode="HTML"
    )
    
    for i, test_case in enumerate(test_cases, 1):
        try:
            # –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            rewritten = rewrite_post(test_case["original"], test_case["style"])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await message.answer(
                f"üìù <b>–¢–µ—Å—Ç {i}: {test_case['type']}</b>\n\n"
                f"<b>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<i>{test_case['original']}</i>\n\n"
                f"<b>–ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:</b>\n{rewritten}\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –ë—ã–ª–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(test_case['original'])}\n"
                f"‚Ä¢ –°—Ç–∞–ª–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(rewritten)}\n"
                f"‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ: {len(rewritten) - len(test_case['original'])}",
                parse_mode="HTML"
            )
        except Exception as e:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i}:</b> {str(e)}",
                parse_mode="HTML"
            )
    
    success_emoji = get_emoji("check")
    await message.answer(
        f"{success_emoji} <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
        f"üéØ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:</b>\n"
        f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        f"‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤\n"
        f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ call-to-action\n"
        f"‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é —ç–º–æ—Ü–∏–π\n"
        f"‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Premium emoji\n\n"
        f"üí° <b>–¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º–∏!</b>",
        parse_mode="HTML"
    )

@router.message(Command("manual"))
async def cmd_manual_rewrite(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–æ–≤–µ—Ç–∞–º–∏ –∏ –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    brain_emoji = get_emoji("brain")
    await safe_edit_message(message,
        f"{brain_emoji} <b>–†—É—á–Ω–æ–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ChatGPT</b>\n\n"
        f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å.\n"
        f"–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ –∏ –¥–∞–º —Å–æ–≤–µ—Ç—ã + –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT!",
        parse_mode="HTML"
    )
    
    await state.set_state(ContentModerationStates.waiting_for_manual_rewrite)

@router.message(StateFilter(ContentModerationStates.waiting_for_manual_rewrite))
async def handle_manual_rewrite(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        return
    
    original_text = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç—ã —á—Ç–æ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
    suggestions = chatgpt_rewriter.get_rewrite_suggestions(original_text)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content_type = chatgpt_rewriter._detect_content_type(original_text)
    type_names = {
        "news": "üì∞ –ù–æ–≤–æ—Å—Ç—å",
        "update": "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 
        "airdrop": "üéÅ Airdrop",
        "analysis": "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Å–æ–≤–µ—Ç–∞–º–∏
    response_text = f"üéØ <b>–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
    response_text += f"üìã <b>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> {type_names.get(content_type, 'üìù –û–±—â–∏–π')}\n"
    response_text += f"üìè <b>–î–ª–∏–Ω–∞:</b> {len(original_text)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
    
    if suggestions:
        response_text += f"üí° <b>–ß—Ç–æ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:</b>\n"
        for i, (key, suggestion) in enumerate(suggestions.items(), 1):
            response_text += f"{i}. {suggestion}\n"
        response_text += "\n"
    else:
        response_text += f"‚úÖ <b>–¢–µ–∫—Å—Ç —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É</b>\n\n"
    
    response_text += f"üìù <b>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<i>{safe_html_with_emoji(original_text)}</i>\n\n"
    
    await safe_edit_message(message, response_text, parse_mode="HTML")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT
    copyable_prompt = get_manual_rewrite_prompt(original_text, content_type)
    
    sparkle_emoji = get_emoji("sparkle")
    await message.answer(
        f"{sparkle_emoji} <b>–ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT</b>\n\n"
        f"üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ ChatGPT:",
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    await message.answer(
        f"<code>{copyable_prompt}</code>",
        parse_mode="HTML"
    )
    
    gift_emoji = get_emoji("gift")
    await message.answer(
        f"{gift_emoji} <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n"
        f"1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–ø—Ç –≤—ã—à–µ\n"
        f"2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ ChatGPT\n"
        f"3Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ–º–ø—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ Enter\n"
        f"4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Å—Ç!\n\n"
        f"üîÑ –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manual",
        parse_mode="HTML"
    )
    
    await state.clear()

@router.message(Command("chatgpt"))  
async def cmd_chatgpt_demo(message: Message):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ ChatGPT API (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    if not config.OPENAI_API_KEY:
        await safe_edit_message(message,
            f"‚ö†Ô∏è <b>OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
            f"–î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ChatGPT.",
            parse_mode="HTML"
        )
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    test_posts = [
        "TON –±–ª–æ–∫—á–µ–π–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç –Ω–∞ 15% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞",
        "Telegram –≤—ã–ø—É—Å—Ç–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –±–æ—Ç–æ–≤", 
        "–ó–∞–ø—É—â–µ–Ω–∞ —Ä–∞–∑–¥–∞—á–∞ 1000 TON –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç —Ä–æ—Å—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞"
    ]
    
    robot_emoji = get_emoji("tech")
    await safe_edit_message(message,
        f"{robot_emoji} <b>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ChatGPT –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        f"üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤...",
        parse_mode="HTML"
    )
    
    for i, original in enumerate(test_posts, 1):
        try:
            # –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ChatGPT
            rewritten = await rewrite_post_with_ai(original, use_chatgpt=True)
            
            await message.answer(
                f"üìù <b>–¢–µ—Å—Ç {i}</b>\n\n"
                f"<b>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<i>{original}</i>\n\n"
                f"<b>ChatGPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n{rewritten}\n\n"
                f"üìä –£–ª—É—á—à–µ–Ω–∏–µ: {len(original)} ‚Üí {len(rewritten)} —Å–∏–º–≤–æ–ª–æ–≤",
                parse_mode="HTML"
            )
            
        except Exception as e:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i}:</b> {str(e)}",
                parse_mode="HTML"
            )
    
    success_emoji = get_emoji("check")
    await message.answer(
        f"{success_emoji} <b>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"ü§ñ <b>ChatGPT –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:</b>\n"
        f"‚Ä¢ –°–æ–∑–¥–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏\n"
        f"‚Ä¢ –£–±–∏—Ä–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã\n"
        f"‚Ä¢ –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —ç–º–æ—Ü–∏–∏\n"
        f"‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        f"‚Ä¢ –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é\n\n"
        f"üí° –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞!",
        parse_mode="HTML"
    )

@router.message(Command("prompts"))
async def cmd_ready_prompts(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    book_emoji = get_emoji("brain")
    await safe_edit_message(message,
        f"{book_emoji} <b>–ì–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è ChatGPT</b>\n\n"
        f"üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:",
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    for content_type, prompt_template in READY_PROMPTS.items():
        type_names = {
            "news": "üì∞ –ù–æ–≤–æ—Å—Ç–∏",
            "update": "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            "airdrop": "üéÅ Airdrop",
            "analysis": "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
        }
        
        await message.answer(
            f"<b>{type_names.get(content_type, content_type.upper())}</b>\n\n"
            f"<code>{prompt_template}</code>",
            parse_mode="HTML"
        )
    
    sparkle_emoji = get_emoji("sparkle")
    await message.answer(
        f"{sparkle_emoji} <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n\n"
        f"1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–º–ø—Ç\n"
        f"2Ô∏è‚É£ –ó–∞–º–µ–Ω–∏—Ç–µ [–í–°–¢–ê–í–¨ –°–Æ–î–ê –ò–°–•–û–î–ù–´–ô –ü–û–°–¢] –Ω–∞ –≤–∞—à —Ç–µ–∫—Å—Ç\n"
        f"3Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ ChatGPT\n"
        f"4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
        f"üí° <b>–°–æ–≤–µ—Ç:</b> –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manual",
        parse_mode="HTML"
    )

@router.message(Command("ai"))
async def cmd_ai_settings(message: Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    settings_emoji = get_emoji("tech")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å OpenAI API
    openai_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if config.OPENAI_API_KEY else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    await safe_edit_message(message,
        f"{settings_emoji} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        f"ü§ñ <b>ChatGPT API:</b> {openai_status}\n"
        f"üéØ <b>–°—Ç–∏–ª—å –∫–∞–Ω–∞–ª–∞:</b> {chatgpt_rewriter.channel_style['theme']}\n"
        f"üìù <b>–¢–æ–Ω:</b> {chatgpt_rewriter.channel_style['tone']}\n"
        f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {chatgpt_rewriter.channel_style['audience']}\n"
        f"üìè <b>–î–ª–∏–Ω–∞ –ø–æ—Å—Ç–æ–≤:</b> {chatgpt_rewriter.channel_style['length']}\n\n"
        f"‚ö° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"‚Ä¢ /manual - —Ä—É—á–Ω–æ–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ–≤–µ—Ç–∞–º–∏\n"
        f"‚Ä¢ /chatgpt - –¥–µ–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        f"‚Ä¢ /prompts - –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è ChatGPT\n"
        f"‚Ä¢ /ai - —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        f"üí° <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º:</b> –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ ChatGPT API",
        parse_mode="HTML"
    )
    
    if not config.OPENAI_API_KEY:
        await message.answer(
            f"‚ö†Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API:</b>\n\n"
            f"1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://platform.openai.com/\n"
            f"2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:\n"
            f"<code>OPENAI_API_KEY=your_api_key_here</code>\n"
            f"3Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ~$0.002 –∑–∞ –ø–æ—Å—Ç (–æ—á–µ–Ω—å –¥–µ—à–µ–≤–æ)",
            parse_mode="HTML"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
@router.callback_query(F.data.startswith("new_post_analysis_"))
async def callback_new_post_analysis(callback: CallbackQuery):
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞ —Å —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∏ –≥–æ—Ç–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    draft_id = int(callback.data.split("_")[3])
    draft = await db.get_draft_by_id(draft_id)
    
    if not draft:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    suggestions = chatgpt_rewriter.get_rewrite_suggestions(draft['original_text'])
    content_type = chatgpt_rewriter._detect_content_type(draft['original_text'])
    
    type_names = {
        "news": "üì∞ –ù–æ–≤–æ—Å—Ç—å",
        "update": "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 
        "airdrop": "üéÅ Airdrop/–†–∞–∑–¥–∞—á–∞",
        "analysis": "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
    }
    
    brain_emoji = get_emoji("brain")
    analysis_text = f"{brain_emoji} <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞</b>\n\n"
    analysis_text += f"üéØ <b>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> {type_names.get(content_type, 'üìù –û–±—â–∏–π')}\n"
    analysis_text += f"üìè <b>–î–ª–∏–Ω–∞:</b> {len(draft['original_text'])} —Å–∏–º–≤–æ–ª–æ–≤\n"
    analysis_text += f"üìÖ <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {safe_html_with_emoji(draft.get('source_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}\n\n"
    
    if suggestions:
        analysis_text += f"üí° <b>–ß—Ç–æ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:</b>\n"
        for i, (key, suggestion) in enumerate(suggestions.items(), 1):
            analysis_text += f"{i}. {suggestion}\n"
        analysis_text += "\n"
    else:
        analysis_text += f"‚úÖ <b>–¢–µ–∫—Å—Ç —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞!</b>\n–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞.\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    style_tips = {
        "airdrop": "üéÅ –°–æ–∑–¥–∞–π—Ç–µ –æ—â—É—â–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        "news": "üì∞ –î–æ–±–∞–≤—å—Ç–µ —Å–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", 
        "update": "üîÑ –ü–æ–¥—á–µ—Ä–∫–Ω–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "analysis": "üìä –°–¥–µ–ª–∞–π—Ç–µ –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä—ã–Ω–∫–∞"
    }
    
    tip = style_tips.get(content_type, "üìù –°–¥–µ–ª–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º –∏ –≤–æ–≤–ª–µ–∫–∞—é—â–∏–º")
    analysis_text += f"üé® <b>–°–æ–≤–µ—Ç –ø–æ —Å—Ç–∏–ª—é:</b>\n{tip}\n\n"
    
    analysis_text += f"üìù <b>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<i>{safe_html_with_emoji(draft['original_text'])}</i>\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT
    copyable_prompt = get_manual_rewrite_prompt(draft['original_text'], content_type)
    sparkle_emoji = get_emoji("sparkle")
    analysis_text += f"{sparkle_emoji} <b>–ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT:</b>\n<code>{copyable_prompt}</code>\n\n"
    analysis_text += f"‚ö° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è!"
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    from keyboards import get_new_post_keyboard
    await safe_edit_message(callback, analysis_text, parse_mode="HTML", reply_markup=get_new_post_keyboard(draft_id))

@router.callback_query(F.data.startswith("new_post_manual_"))
async def callback_new_post_manual(callback: CallbackQuery):
    """–†—É—á–Ω–æ–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≥–æ—Ç–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    draft_id = int(callback.data.split("_")[3])
    draft = await db.get_draft_by_id(draft_id)
    
    if not draft:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑
    suggestions = chatgpt_rewriter.get_rewrite_suggestions(draft['original_text'])
    content_type = chatgpt_rewriter._detect_content_type(draft['original_text'])
    
    type_names = {
        "news": "üì∞ –ù–æ–≤–æ—Å—Ç—å",
        "update": "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 
        "airdrop": "üéÅ Airdrop",
        "analysis": "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
    analysis_text = f"üéØ <b>–†—É—á–Ω–æ–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
    analysis_text += f"üìã <b>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> {type_names.get(content_type, 'üìù –û–±—â–∏–π')}\n"
    analysis_text += f"üìè <b>–î–ª–∏–Ω–∞:</b> {len(draft['original_text'])} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
    
    if suggestions:
        analysis_text += f"üí° <b>–ß—Ç–æ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:</b>\n"
        for i, suggestion in enumerate(list(suggestions.values())[:4], 1):
            analysis_text += f"{i}. {suggestion}\n"
        analysis_text += "\n"
    
    analysis_text += f"üìù <b>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<i>{safe_html_with_emoji(draft['original_text'])}</i>"
    
    await safe_edit_message(callback, analysis_text, parse_mode="HTML")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
    copyable_prompt = get_manual_rewrite_prompt(draft['original_text'], content_type)
    
    sparkle_emoji = get_emoji("sparkle")
    await callback.bot.send_message(
        callback.from_user.id,
        f"{sparkle_emoji} <b>–ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT</b>\n\n"
        f"üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ ChatGPT:",
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç
    await callback.bot.send_message(
        callback.from_user.id,
        f"<code>{copyable_prompt}</code>",
        parse_mode="HTML"
    )
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    gift_emoji = get_emoji("gift")
    await callback.bot.send_message(
        callback.from_user.id,
        f"{gift_emoji} <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n"
        f"1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–ø—Ç –≤—ã—à–µ\n"
        f"2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ ChatGPT\n"  
        f"3Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ–º–ø—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        f"4Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ ChatGPT\n"
        f"5Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_post –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
        f"üìä ID —á–µ—Ä–Ω–æ–≤–∏–∫–∞: #{draft_id}",
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("new_post_details_"))
async def callback_new_post_details(callback: CallbackQuery):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    draft_id = int(callback.data.split("_")[3])
    draft = await db.get_draft_by_id(draft_id)
    
    if not draft:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    details_text = f"üìã <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
    details_text += f"üÜî <b>ID:</b> #{draft_id}\n"
    details_text += f"üì° <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {safe_html_with_emoji(draft.get('source_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}\n"
    details_text += f"üìÖ <b>–î–∞—Ç–∞:</b> {draft.get('source_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:19]}\n"
    details_text += f"üîç <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {safe_html_with_emoji(', '.join(draft.get('keywords_matched', [])))}\n"
    
    if draft.get('source_url'):
        details_text += f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {safe_html_with_emoji(draft['source_url'])}\n"
    
    details_text += f"\nüìù <b>–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<i>{safe_html_with_emoji(draft['original_text'])}</i>\n\n"
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    content_type = chatgpt_rewriter._detect_content_type(draft['original_text'])
    suggestions = chatgpt_rewriter.get_rewrite_suggestions(draft['original_text'])
    
    details_text += f"üéØ <b>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> {content_type}\n"
    details_text += f"üìä <b>–°–∏–º–≤–æ–ª–æ–≤:</b> {len(draft['original_text'])}\n"
    details_text += f"üîß <b>–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π:</b> {len(suggestions)}\n"
    
    await safe_edit_message(callback, details_text, parse_mode="HTML")

@router.callback_query(F.data.startswith("new_post_skip_"))
async def callback_new_post_skip(callback: CallbackQuery):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å—Ç"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    draft_id = int(callback.data.split("_")[3])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "skipped"
    await db.update_draft_status(draft_id, 'skipped')
    
    skip_emoji = get_emoji("cross")
    await safe_edit_message(callback,
        f"{skip_emoji} <b>–ü–æ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω</b>\n\n"
        f"üìä ID #{draft_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π.\n"
        f"–ü–æ—Å—Ç –Ω–µ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
        parse_mode="HTML"
    )

@router.message(Command("test_clean"))
async def cmd_test_clean(message: Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –í–∞—à –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –ø–æ—Å—Ç –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
    problematic_text = """üéÅ –†–∞–∑–¥–∞—á–∞! **üç∑**** –ü–ê–®–û–ö –¢–ï–°–¢–ò–†–£–ï–¢ –ù–û–í–£–Æ –û–ë–ù–û–í–£!** –ù–∞ –∫–∞–¥—Ä–∞—Ö –º–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å, –∫–∞–∫ **–ü–∞–≤–µ–ª** **–î—É—Ä–æ–≤** –ø–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π **–æ–±–Ω–æ–≤—ã** –∑–∞—Ö–æ–¥–∏—Ç –∏ —Å–∞–º —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç, –∏ —Ç–∞–∫ –∂–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å **–Ω–æ–≤—ã–µ** **–ø–æ–¥–∞—Ä–∫–∏**, –Ω–æ —ç—Ç–æ –Ω–∏–∫–∞–∫ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç... üò£ __–∫—Ä–∞—Å–∞–≤–∞? __ ‚ù§Ô∏è - —Ö–∞—Ä–æ—à ü§Ø - –ø–æ–¥–∞—Ä–∫–∏ —Ç–æ –∫–æ–≥–¥–∞ –µ–ø—Ç–∞ ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ **ü•à**[**–ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ 1 **](|****‚ù§Ô∏è**[**–ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ 2**]( ** | ‚≠êÔ∏è [**–ù–∞—à —á–∞—Ç**]( | [‚≠êÔ∏è]( - –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã –∑–∞ —Ä—É–±–ª–∏**](!"""
    
    clean_emoji = get_emoji("tech")
    await safe_edit_message(message,
        f"{clean_emoji} <b>–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—á–∏—Å—Ç–∫–∏</b>\n\n"
        f"üß™ –ü—Ä–æ–≤–µ—Ä—è—é –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞...",
        parse_mode="HTML"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    await message.answer(
        f"üìù <b>–ò–°–•–û–î–ù–´–ô —Ç–µ–∫—Å—Ç (–ø—Ä–æ–±–ª–µ–º–Ω—ã–π):</b>\n\n"
        f"<code>{problematic_text[:500]}...</code>",
        parse_mode="HTML"
    )
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
    cleaned_text = chatgpt_rewriter.clean_source_text(problematic_text)
    
    await message.answer(
        f"‚ú® <b>–û–ß–ò–©–ï–ù–ù–´–ô —Ç–µ–∫—Å—Ç:</b>\n\n"
        f"<i>{cleaned_text}</i>\n\n"
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏:</b>\n"
        f"‚Ä¢ –ë—ã–ª–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(problematic_text)}\n"
        f"‚Ä¢ –°—Ç–∞–ª–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(cleaned_text)}\n"
        f"‚Ä¢ –£–±—Ä–∞–Ω–æ –º—É—Å–æ—Ä–∞: {len(problematic_text) - len(cleaned_text)} —Å–∏–º–≤–æ–ª–æ–≤",
        parse_mode="HTML"
    )
    
    # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º ChatGPT (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if config.OPENAI_API_KEY:
        robot_emoji = get_emoji("brain")
        await message.answer(
            f"{robot_emoji} <b>–¢–µ—Å—Ç ChatGPT —Å –æ—á–∏—â–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º:</b>\n\n"
            f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ ChatGPT...",
            parse_mode="HTML"
        )
        
        try:
            # –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ChatGPT
            rewritten = await chatgpt_rewriter.rewrite_with_chatgpt(problematic_text)
            
            if rewritten:
                await message.answer(
                    f"ü§ñ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç ChatGPT:</b>\n\n"
                    f"{rewritten}\n\n"
                    f"üìä <b>–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                    f"‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(problematic_text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
                    f"‚Ä¢ –û—á–∏—â–µ–Ω–Ω—ã–π: {len(cleaned_text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
                    f"‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç ChatGPT: {len(rewritten)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                    f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:</b> –ù–µ—Ç –ª–∏ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ –∏ –º—É—Å–æ—Ä–∞?",
                    parse_mode="HTML"
                )
            else:
                await message.answer("‚ùå ChatGPT –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç")
                
        except Exception as e:
            await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ ChatGPT:</b> {str(e)}")
    else:
        await message.answer(
            f"‚ö†Ô∏è <b>OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
            f"–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª"
        )
    
    success_emoji = get_emoji("check")
    await message.answer(
        f"{success_emoji} <b>–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        f"üîß <b>–£–ª—É—á—à–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ:</b>\n"
        f"‚Ä¢ –£–±–∏—Ä–∞–µ—Ç Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (**—Ç–µ–∫—Å—Ç**)\n"
        f"‚Ä¢ –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏ [text]()\n"
        f"‚Ä¢ –û—á–∏—â–∞–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã ‚ûñ –∏ —Ä–∞–º–∫–∏\n"
        f"‚Ä¢ –£–±–∏—Ä–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ö–µ—à—Ç–µ–≥–∏\n"
        f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç ChatGPT\n"
        f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ\n\n"
        f"üí° –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –±—É–¥—É—Ç —á–∏—Å—Ç—ã–º–∏ –∏ —á–∏—Ç–∞–µ–º—ã–º–∏!",
        parse_mode="HTML"
    )

@router.message(Command("prompt"))
async def cmd_quick_prompt(message: Message, state: FSMContext):
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    sparkle_emoji = get_emoji("sparkle")
    await safe_edit_message(message,
        f"{sparkle_emoji} <b>–ë—ã—Å—Ç—Ä—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤</b>\n\n"
        f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –¥–∞–º:\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —á—Ç–æ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å\n"
        f"‚Ä¢ –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT\n"
        f"‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–µ\n\n"
        f"üí° –ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Å—Ç:",
        parse_mode="HTML"
    )
    
    await state.set_state(ContentModerationStates.waiting_for_manual_rewrite)

@router.message(Command("guide"))
async def cmd_manual_guide(message: Message):
    """–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä—É—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    book_emoji = get_emoji("brain")
    await safe_edit_message(message,
        f"{book_emoji} <b>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä—É—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É</b>\n\n"
        f"ü§ñ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:</b>\n"
        f"1Ô∏è‚É£ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç {len(config.TG_CHANNELS)} Telegram –∫–∞–Ω–∞–ª–æ–≤\n"
        f"2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç {len(config.RSS_SOURCES)} RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
        f"3Ô∏è‚É£ –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å—Ç—ã –ø–æ {len(config.KEYWORDS)} –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
        f"4Ô∏è‚É£ <b>–°—Ä–∞–∑—É –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤–∞–º</b> —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏\n\n"
        
        f"üì± <b>–ö–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ—Å—Ç, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:</b>\n"
        f"‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç\n"
        f"‚Ä¢ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–Ω–æ–≤–æ—Å—Ç—å/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ/airdrop)\n"
        f"‚Ä¢ –°–æ–≤–µ—Ç—ã —á—Ç–æ —É–ª—É—á—à–∏—Ç—å\n"
        f"‚Ä¢ –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π\n\n"
        
        f"üéØ <b>–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
        f"üìù <b>\"–†—É—á–Ω–æ–π –ø—Ä–æ–º–ø—Ç\"</b> ‚Üí –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT\n"
        f"üìã <b>\"–ü–æ–¥—Ä–æ–±–Ω–µ–µ\"</b> ‚Üí –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n"
        f"‚ùå <b>\"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\"</b> ‚Üí –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç\n\n"
        
        f"‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/prompt - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\n"
        f"/manual - –∞–Ω–∞–ª–∏–∑ + –ø—Ä–æ–º–ø—Ç\n"
        f"/prompts - –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤\n\n"
        
        f"üí° <b>Workflow:</b>\n"
        f"–ü–æ—Å—Ç –Ω–∞–π–¥–µ–Ω ‚Üí –ê–Ω–∞–ª–∏–∑ ‚Üí –ü—Ä–æ–º–ø—Ç ‚Üí ChatGPT ‚Üí –ì–æ—Ç–æ–≤–æ!",
        parse_mode="HTML"
    )

@router.message(Command("monitor"))
async def cmd_start_monitoring(message: Message):
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    from scheduler import scheduler
    
    monitor_emoji = get_emoji("tech")
    await safe_edit_message(message,
        f"{monitor_emoji} <b>–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</b>\n\n"
        f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...",
        parse_mode="HTML"
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä—É—á–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        result = await scheduler.run_manual_monitoring()
        
        if result:
            success_emoji = get_emoji("check")
            await message.answer(
                f"{success_emoji} <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                f"üìä <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:</b>\n"
                f"‚Ä¢ {len(config.TG_CHANNELS)} Telegram –∫–∞–Ω–∞–ª–æ–≤\n"
                f"‚Ä¢ {len(config.RSS_SOURCES)} RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
                f"‚Ä¢ {len(config.KEYWORDS)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n\n"
                f"üíå <b>–ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã</b> - –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤!\n\n"
                f"‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –∫–∞–∂–¥—ã–µ {config.MONITORING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
            
    except Exception as e:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b> {str(e)}")

@router.message(Command("demo_post"))
async def cmd_demo_post_notification(message: Message):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ—Å—Ç–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ —á–µ—Ä–Ω–æ–≤–∏–∫
    demo_text = "TON –±–ª–æ–∫—á–µ–π–Ω –æ–±—ä—è–≤–ª—è–µ—Ç –æ –Ω–æ–≤–æ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–µ —Å –∫—Ä—É–ø–Ω–æ–π –±–∏—Ä–∂–µ–π. –û–∂–∏–¥–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã."
    
    demo_draft_id = await db.add_content_draft(
        source_type='demo',
        source_name='–î–µ–º–æ –∏—Å—Ç–æ—á–Ω–∏–∫ - —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        original_text=demo_text,
        source_url='https://example.com/demo-partnership',
        source_date=datetime.now().isoformat(),
        keywords_matched=['TON', '–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ', '–±–∏—Ä–∂–∞', '–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å']
    )
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ
    from content_monitor import content_monitor
    draft = await db.get_draft_by_id(demo_draft_id)
    
    if draft:
        await content_monitor.send_new_post_to_admin(message.bot, config.ADMIN_ID, draft)
        
        demo_emoji = get_emoji("gift")
        await safe_edit_message(message,
            f"{demo_emoji} <b>–î–µ–º–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"üì¨ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ - —Ç–∞–∫ –≤—ã–≥–ª—è–¥—è—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö.\n\n"
            f"üéØ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:</b>\n"
            f"üìù \"–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç\" - –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT\n"
            f"üí° \"–ê–Ω–∞–ª–∏–∑ + —Å–æ–≤–µ—Ç—ã\" - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n"
            f"üìã \"–ü–æ–¥—Ä–æ–±–Ω–µ–µ\" - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
            f"üí° ID –¥–µ–º–æ –ø–æ—Å—Ç–∞: #{demo_draft_id}",
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –ø–æ—Å—Ç–∞")

@router.message(lambda m: m.text and not m.text.startswith("/"))
async def handle_free_text(message: Message):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    if not config.OPENAI_API_KEY:
        await message.answer(
            "‚ö†Ô∏è <b>OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ChatGPT.",
            parse_mode="HTML"
        )
        return
    
    original_text = message.text
    robot_emoji = get_emoji("tech")
    await message.answer(f"{robot_emoji} <b>–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É—é —á–µ—Ä–µ–∑ ChatGPT...</b>", parse_mode="HTML")
    
    try:
        rewritten = await rewrite_post_with_ai(original_text)
        if rewritten:
            sparkle_emoji = get_emoji("sparkle")
            await message.answer(
                f"{sparkle_emoji} <b>–ì–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b>\n\n"
                f"<i>{safe_html_with_emoji(rewritten)}</i>",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.",
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ ChatGPT: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT:</b> {e}",
            parse_mode="HTML"
        )

@router.message(Command("add_rss"))
async def cmd_add_rss(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ RSS: /add_rss https://example.com/feed.xml")
        return
    url = args[1].strip()
    from database import db
    await db.add_source("rss", url)
    await message.answer(f"‚úÖ RSS –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {url}")

@router.message(Command("remove_rss"))
async def cmd_remove_rss(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ RSS: /remove_rss https://example.com/feed.xml")
        return
    url = args[1].strip()
    from database import db
    await db.remove_source("rss", url)
    await message.answer(f"üóë RSS –∏—Å—Ç–æ—á–Ω–∏–∫ —É–¥–∞–ª—ë–Ω: {url}")

@router.message(Command("add_tg"))
async def cmd_add_tg(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞: /add_tg @channel")
        return
    channel = args[1].strip()
    from database import db
    await db.add_source("tg", channel)
    await message.answer(f"‚úÖ TG –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {channel}")

@router.message(Command("remove_tg"))
async def cmd_remove_tg(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞: /remove_tg @channel")
        return
    channel = args[1].strip()
    from database import db
    await db.remove_source("tg", channel)
    await message.answer(f"üóë TG –∫–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω: {channel}")

@router.message(Command("list_sources"))
async def cmd_list_sources(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    from database import db
    rss = await db.get_sources("rss")
    tg = await db.get_sources("tg")
    text = "<b>üîó –ê–∫—Ç–∏–≤–Ω—ã–µ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n" + ("\n".join([s['source_url'] for s in rss]) or "–ù–µ—Ç")
    text += "\n\n<b>üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ TG –∫–∞–Ω–∞–ª—ã:</b>\n" + ("\n".join([s['source_url'] for s in tg]) or "–ù–µ—Ç")
    await message.answer(text, parse_mode="HTML")

@router.message(Command("stats_source"))
async def cmd_source_stats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:\n"
            "/stats_source @channel - –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞\n"
            "/stats_source https://example.com/rss - –¥–ª—è RSS"
        )
        return

    source = args[1].strip()
    source_type = 'tg' if source.startswith('@') else 'rss'
    
    stats = await db.get_channel_stats(source_type, source)
    if not stats:
        await message.answer(f"‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {source} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    stats = stats[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source}</b>\n\n"
    
    text += f"üìà <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats['total_posts']}\n"
    text += f"‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {stats['matched_posts']}\n"
    text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {stats['avg_posts_per_day']}\n"
    
    if stats['last_post_date']:
        text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {stats['last_post_date'][:16]}\n"
    
    text += f"\nüîç <b>–¢–æ–ø –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:</b>\n"
    for kw, count in stats['most_used_keywords'].items():
        text += f"‚Ä¢ {kw}: {count} —Ä–∞–∑\n"
    
    text += f"\n‚è∞ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º:</b>\n"
    hours = stats['activity_hours']
    max_posts = max(hours.values()) if hours else 1
    for hour in sorted(hours.keys(), key=int):
        count = hours[hour]
        bars = "‚ñà" * int((count / max_posts) * 10)
        text += f"{hour.zfill(2)}:00 {bars} ({count})\n"
    
    text += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated_at'][:16]}"
    
    await message.answer(text, parse_mode="HTML")

@router.message(Command("stats_all"))
async def cmd_all_stats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    all_stats = await db.get_channel_stats()
    if not all_stats:
        await message.answer("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    tg_stats = [s for s in all_stats if s['source_type'] == 'tg']
    rss_stats = [s for s in all_stats if s['source_type'] == 'rss']
    
    text = "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</b>\n\n"
    
    # Telegram –∫–∞–Ω–∞–ª—ã
    text += "üí¨ <b>Telegram –∫–∞–Ω–∞–ª—ã:</b>\n"
    total_tg_posts = sum(s['total_posts'] for s in tg_stats)
    total_tg_matched = sum(s['matched_posts'] for s in tg_stats)
    text += f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {len(tg_stats)}\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_tg_posts}\n"
    text += f"‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö: {total_tg_matched}\n"
    if tg_stats:
        text += "\n–¢–æ–ø –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n"
        for stat in sorted(tg_stats, key=lambda x: x['total_posts'], reverse=True)[:5]:
            text += f"‚Ä¢ {stat['source_url']}: {stat['total_posts']} –ø–æ—Å—Ç–æ–≤\n"
    
    # RSS –ª–µ–Ω—Ç—ã
    text += "\nüì∞ <b>RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
    total_rss_posts = sum(s['total_posts'] for s in rss_stats)
    total_rss_matched = sum(s['matched_posts'] for s in rss_stats)
    text += f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(rss_stats)}\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_rss_posts}\n"
    text += f"‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö: {total_rss_matched}\n"
    if rss_stats:
        text += "\n–¢–æ–ø RSS –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n"
        for stat in sorted(rss_stats, key=lambda x: x['total_posts'], reverse=True)[:5]:
            text += f"‚Ä¢ {stat['source_url']}: {stat['total_posts']} –∑–∞–ø–∏—Å–µ–π\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text += f"\nüìà <b>–ò—Ç–æ–≥–æ:</b>\n"
    text += f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(all_stats)}\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_tg_posts + total_rss_posts}\n"
    text += f"‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö: {total_tg_matched + total_rss_matched}\n"
    
    await message.answer(text, parse_mode="HTML")