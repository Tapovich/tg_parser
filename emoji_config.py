import random

# Telegram Premium Emoji IDs
PREMIUM_EMOJIS = {
    "laptop": "5244683263494069880",
    "kiss": "5244946884291732268",
    "cigarette": "5244688456109530025",
    "brain": "5194904652662971938",
    "gift": "5456203011183371567",
    "heart": "5424912684078348533",
    "gold_star": "4974529275114816593",
    "peach": "5454327849936755071",
    "dance": "5458694341323136053",
    "angry": "5456509220876721655",
    "play_button": "5262865002519353097",
    "sparkle": "5262668688154187507",
    "blue_heart": "5265009986496386438",
    "fireball": "5264962561467502824",
    "wifi": "5262724084642372455",
    "tech": "5264768725298469219",
    "check": "5343715481238925891",
    "cross": "5343709640083400091",
    "reload": "5465368548702446780",
    "red_dot": "5328262446605951527",
    "diamond": "5370546279375982437",
    "airplane": "5397669646390282694",
    "city": "5371100325862200313",
    "yellow_star": "5370718451729978105",
    "warning": "5368454557288391017",
    "clock": "5262873450720025099",
    "bread": "5343975734782205808",
    "sleepy": "5956434386109862089",
    "hourglass": "5229006053043089024",
    "envelope": "5350291836378307462",
    "present": "5936238625250350064",
    "chart": "5368334006146322724",
    "tower": "5262948196035875637",
    "shine": "5262587135315170424",
    "square": "5264980093524005655",
    "red_heart": "5248973918642910563",
    "blob_love": "5956318202949537587",
    "smile": "6229021005310854941",
    "ok_hand": "5244673243335370634",
    "star_simple": "5321485469249198987"
}

# Fallback emoji –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç Premium emoji
FALLBACK_EMOJIS = {
    "yellow_star": "‚≠ê",
    "check": "‚úÖ",
    "heart": "‚ù§Ô∏è",
    "brain": "üß†",
    "gift": "üéÅ",
    "sparkle": "‚ú®",
    "warning": "‚ö†Ô∏è",
    "airplane": "‚úàÔ∏è",
    "clock": "üïê",
    "diamond": "üíé",
    "reload": "üîÑ",
    "tech": "üíª",
    "tower": "üóº",
    "envelope": "üìß",
    "shine": "üåü",
    "ok_hand": "üëå",
    "smile": "üòä",
    "laptop": "üíª",
    "kiss": "üòò",
    "angry": "üò†",
    "play_button": "‚ñ∂Ô∏è",
    "blue_heart": "üíô",
    "fireball": "üî•",
    "wifi": "üì∂",
    "cross": "‚ùå",
    "red_dot": "üî¥",
    "city": "üèôÔ∏è",
    "bread": "üçû",
    "sleepy": "üò¥",
    "hourglass": "‚è≥",
    "present": "üéÅ",
    "chart": "üìä",
    "square": "‚¨ú",
    "red_heart": "‚ù§Ô∏è",
    "blob_love": "ü•∞",
    "star_simple": "‚≠ê"
}

def get_random_emoji() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π Premium emoji –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ"""
    emoji_id = random.choice(list(PREMIUM_EMOJIS.values()))
    return f'<tg-emoji emoji-id="{emoji_id}"></tg-emoji>'

def get_emoji(name: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π Premium emoji –ø–æ –∏–º–µ–Ω–∏ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ"""
    emoji_id = PREMIUM_EMOJIS.get(name)
    if emoji_id:
        return f'<tg-emoji emoji-id="{emoji_id}"></tg-emoji>'
    return ""

def get_emoji_with_fallback(name: str, use_premium: bool = True) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç emoji —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é fallback –Ω–∞ –æ–±—ã—á–Ω—ã–µ Unicode emoji
    """
    if use_premium and name in PREMIUM_EMOJIS:
        return f'<tg-emoji emoji-id="{PREMIUM_EMOJIS[name]}"></tg-emoji>'
    elif name in FALLBACK_EMOJIS:
        return FALLBACK_EMOJIS[name]
    else:
        return "üòä"  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π emoji

def get_mixed_emoji_text(text: str, emoji_name: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å Premium emoji –∏ fallback emoji –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    """
    premium_emoji = get_emoji(emoji_name)
    fallback_emoji = FALLBACK_EMOJIS.get(emoji_name, "üòä")

    return f"{premium_emoji}{fallback_emoji} {text}"

def get_thematic_emoji(content: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π emoji –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    content_lower = content.lower()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º–∞—Ç–∏–∫—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if any(word in content_lower for word in ['ton', '–±–ª–æ–∫—á–µ–π–Ω', 'blockchain', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', '—Ç–æ–∫–µ–Ω']):
        return get_emoji("diamond")
    elif any(word in content_lower for word in ['–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', 'update', '–Ω–æ–≤–æ—Å—Ç—å', '—Ä–µ–ª–∏–∑']):
        return get_emoji("yellow_star")
    elif any(word in content_lower for word in ['airdrop', '–ø–æ–¥–∞—Ä–æ–∫', '—Ä–∞–∑–¥–∞—á–∞', 'gift']):
        return get_emoji("gift")
    elif any(word in content_lower for word in ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', 'tech', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'ai', '–±–æ—Ç']):
        return get_emoji("tech")
    elif any(word in content_lower for word in ['—Ä–æ—Å—Ç', '—É—Å–ø–µ—Ö', '—Ç–æ–ø', '–ª—É—á—à–∏–π']):
        return get_emoji("check")
    elif any(word in content_lower for word in ['–ª—é–±–æ–≤—å', '—Å–µ—Ä–¥—Ü–µ', '–Ω—Ä–∞–≤–∏—Ç—Å—è']):
        return get_emoji("red_heart")
    elif any(word in content_lower for word in ['–≤—Ä–µ–º—è', '—Å–∫–æ—Ä–æ', '–æ–∂–∏–¥–∞–Ω–∏–µ']):
        return get_emoji("clock")
    elif any(word in content_lower for word in ['–≤–∞–∂–Ω–æ', '–≤–Ω–∏–º–∞–Ω–∏–µ', '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ']):
        return get_emoji("warning")
    else:
        return get_emoji("sparkle")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

def add_emojis_to_post(text: str, style: str = "random") -> str:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç Premium emoji –≤ –ø–æ—Å—Ç

    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        style: –°—Ç–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è emoji ('random', 'thematic', 'structured')
    """
    lines = text.split('\n')
    if not lines:
        return text

    if style == "random":
        # –°–ª—É—á–∞–π–Ω—ã–µ emoji –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        start_emoji = get_random_emoji()
        end_emoji = get_random_emoji()

        lines[0] = f"{start_emoji} {lines[0]}"
        lines[-1] = f"{lines[-1]} {end_emoji}"

    elif style == "thematic":
        # –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ emoji
        start_emoji = get_thematic_emoji(text)

        lines[0] = f"{start_emoji} {lines[0]}"

        # –î–æ–±–∞–≤–ª—è–µ–º emoji –≤ —Å–µ—Ä–µ–¥–∏–Ω—É, –µ—Å–ª–∏ –ø–æ—Å—Ç –¥–ª–∏–Ω–Ω—ã–π
        if len(lines) > 3:
            middle_idx = len(lines) // 2
            middle_emoji = get_thematic_emoji(lines[middle_idx])
            lines[middle_idx] = f"{lines[middle_idx]} {middle_emoji}"

    elif style == "structured":
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ emoji
        title_emoji = get_emoji("yellow_star")
        content_emoji = get_emoji("brain")
        cta_emoji = get_emoji("heart")

        lines[0] = f"{title_emoji} {lines[0]}"

        # –ò—â–µ–º –∞–±–∑–∞—Ü —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        for i, line in enumerate(lines[1:], 1):
            if line.strip() and len(line) > 50:
                lines[i] = f"{lines[i]} {content_emoji}"
                break

        # –î–æ–±–∞–≤–ª—è–µ–º CTA emoji –≤ –∫–æ–Ω–µ—Ü
        if len(lines) > 1:
            lines[-1] = f"{lines[-1]} {cta_emoji}"

    return '\n'.join(lines)

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–æ–≤
POST_TEMPLATES = {
    "news": {
        "start_emoji": "yellow_star",
        "content_emoji": "brain",
        "end_emoji": "sparkle"
    },
    "update": {
        "start_emoji": "reload",
        "content_emoji": "tech",
        "end_emoji": "check"
    },
    "airdrop": {
        "start_emoji": "gift",
        "content_emoji": "diamond",
        "end_emoji": "heart"
    },
    "analysis": {
        "start_emoji": "chart",
        "content_emoji": "brain",
        "end_emoji": "ok_hand"
    }
}

def apply_template(text: str, template_name: str) -> str:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω emoji –∫ –ø–æ—Å—Ç—É"""
    if template_name not in POST_TEMPLATES:
        return add_emojis_to_post(text, "thematic")

    template = POST_TEMPLATES[template_name]
    lines = text.split('\n')

    if not lines:
        return text

    # –ù–∞—á–∞–ª—å–Ω—ã–π emoji
    start_emoji = get_emoji(template["start_emoji"])
    lines[0] = f"{start_emoji} {lines[0]}"

    # Emoji –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if len(lines) > 2:
        middle_idx = len(lines) // 2
        content_emoji = get_emoji(template["content_emoji"])
        lines[middle_idx] = f"{lines[middle_idx]} {content_emoji}"

    # –ö–æ–Ω–µ—á–Ω—ã–π emoji
    if len(lines) > 1:
        end_emoji = get_emoji(template["end_emoji"])
        lines[-1] = f"{lines[-1]} {end_emoji}"

    return '\n'.join(lines)

def safe_html_with_emoji(text: str) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Ç–µ–≥–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç Premium emoji —Ç–µ–≥–∏

    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ emoji —Ç–µ–≥–∞–º–∏

    Returns:
        –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–ª—è HTML —Ç–µ–∫—Å—Ç —Å —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ emoji
    """
    import html
    import re

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ tg-emoji —Ç–µ–≥–∏
    emoji_pattern = r'<tg-emoji emoji-id="[^"]+"></tg-emoji>'
    emoji_tags = re.findall(emoji_pattern, text)

    # –ó–∞–º–µ–Ω—è–µ–º emoji —Ç–µ–≥–∏ –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    temp_text = text
    placeholders = []
    for i, emoji_tag in enumerate(emoji_tags):
        placeholder = f"__EMOJI_PLACEHOLDER_{i}__"
        placeholders.append((placeholder, emoji_tag))
        temp_text = temp_text.replace(emoji_tag, placeholder, 1)

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    escaped_text = html.escape(temp_text)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º emoji —Ç–µ–≥–∏ –æ–±—Ä–∞—Ç–Ω–æ
    for placeholder, emoji_tag in placeholders:
        escaped_text = escaped_text.replace(placeholder, emoji_tag)

    return escaped_text

def validate_emoji_text(text: str) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç emoji —Ç–µ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–µ

    Args:
        text: –¢–µ–∫—Å—Ç —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ emoji —Ç–µ–≥–∞–º–∏

    Returns:
        –¢–µ–∫—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ emoji —Ç–µ–≥–∞–º–∏
    """
    import re

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ emoji —Ç–µ–≥–∏
    text = re.sub(r'&lt;tg-emoji emoji-id=&quot;([^&]+)&quot;&gt;&lt;/tg-emoji&gt;',
                  r'<tg-emoji emoji-id="\1"></tg-emoji>', text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å emoji ID
    def check_emoji_id(match):
        emoji_id = match.group(1)
        if emoji_id in PREMIUM_EMOJIS.values():
            return match.group(0)
        else:
            # –ï—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π emoji
            import random
            valid_id = random.choice(list(PREMIUM_EMOJIS.values()))
            return f'<tg-emoji emoji-id="{valid_id}"></tg-emoji>'

    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ emoji ID
    text = re.sub(r'<tg-emoji emoji-id="([^"]+)"></tg-emoji>', check_emoji_id, text)

    return text 